# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _OpenZen
else:
    import _OpenZen

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class OpenZenFloatArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _OpenZen.OpenZenFloatArray_swiginit(self, _OpenZen.new_OpenZenFloatArray(nelements))
    __swig_destroy__ = _OpenZen.delete_OpenZenFloatArray

    def __getitem__(self, index):
        return _OpenZen.OpenZenFloatArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _OpenZen.OpenZenFloatArray___setitem__(self, index, value)

    def cast(self):
        return _OpenZen.OpenZenFloatArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _OpenZen.OpenZenFloatArray_frompointer(t)

# Register OpenZenFloatArray in _OpenZen:
_OpenZen.OpenZenFloatArray_swigregister(OpenZenFloatArray)

def OpenZenFloatArray_frompointer(t):
    return _OpenZen.OpenZenFloatArray_frompointer(t)

class ZenClientHandle_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    handle = property(_OpenZen.ZenClientHandle_t_handle_get, _OpenZen.ZenClientHandle_t_handle_set)

    def __init__(self):
        _OpenZen.ZenClientHandle_t_swiginit(self, _OpenZen.new_ZenClientHandle_t())
    __swig_destroy__ = _OpenZen.delete_ZenClientHandle_t

# Register ZenClientHandle_t in _OpenZen:
_OpenZen.ZenClientHandle_t_swigregister(ZenClientHandle_t)

class ZenSensorHandle_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    handle = property(_OpenZen.ZenSensorHandle_t_handle_get, _OpenZen.ZenSensorHandle_t_handle_set)

    def __init__(self):
        _OpenZen.ZenSensorHandle_t_swiginit(self, _OpenZen.new_ZenSensorHandle_t())
    __swig_destroy__ = _OpenZen.delete_ZenSensorHandle_t

# Register ZenSensorHandle_t in _OpenZen:
_OpenZen.ZenSensorHandle_t_swigregister(ZenSensorHandle_t)

class ZenComponentHandle_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    handle = property(_OpenZen.ZenComponentHandle_t_handle_get, _OpenZen.ZenComponentHandle_t_handle_set)

    def __init__(self):
        _OpenZen.ZenComponentHandle_t_swiginit(self, _OpenZen.new_ZenComponentHandle_t())
    __swig_destroy__ = _OpenZen.delete_ZenComponentHandle_t

# Register ZenComponentHandle_t in _OpenZen:
_OpenZen.ZenComponentHandle_t_swigregister(ZenComponentHandle_t)

ZenError_None = _OpenZen.ZenError_None
ZenError_Unknown = _OpenZen.ZenError_Unknown
ZenError_IsNull = _OpenZen.ZenError_IsNull
ZenError_NotNull = _OpenZen.ZenError_NotNull
ZenError_WrongDataType = _OpenZen.ZenError_WrongDataType
ZenError_BufferTooSmall = _OpenZen.ZenError_BufferTooSmall
ZenError_InvalidArgument = _OpenZen.ZenError_InvalidArgument
ZenError_NotSupported = _OpenZen.ZenError_NotSupported
ZenError_AlreadyInitialized = _OpenZen.ZenError_AlreadyInitialized
ZenError_NotInitialized = _OpenZen.ZenError_NotInitialized
ZenError_Device_IoTypeInvalid = _OpenZen.ZenError_Device_IoTypeInvalid
ZenError_Sensor_VersionNotSupported = _OpenZen.ZenError_Sensor_VersionNotSupported
ZenError_Device_ListingFailed = _OpenZen.ZenError_Device_ListingFailed
ZenError_Device_Listing = _OpenZen.ZenError_Device_Listing
ZenError_WrongSensorType = _OpenZen.ZenError_WrongSensorType
ZenError_WrongIoType = _OpenZen.ZenError_WrongIoType
ZenError_UnknownDeviceId = _OpenZen.ZenError_UnknownDeviceId
ZenError_Io_AlreadyInitialized = _OpenZen.ZenError_Io_AlreadyInitialized
ZenError_Io_NotInitialized = _OpenZen.ZenError_Io_NotInitialized
ZenError_Io_InitFailed = _OpenZen.ZenError_Io_InitFailed
ZenError_Io_DeinitFailed = _OpenZen.ZenError_Io_DeinitFailed
ZenError_Io_ReadFailed = _OpenZen.ZenError_Io_ReadFailed
ZenError_Io_SendFailed = _OpenZen.ZenError_Io_SendFailed
ZenError_Io_GetFailed = _OpenZen.ZenError_Io_GetFailed
ZenError_Io_SetFailed = _OpenZen.ZenError_Io_SetFailed
ZenError_Io_Busy = _OpenZen.ZenError_Io_Busy
ZenError_Io_Timeout = _OpenZen.ZenError_Io_Timeout
ZenError_Io_UnexpectedFunction = _OpenZen.ZenError_Io_UnexpectedFunction
ZenError_Io_UnsupportedFunction = _OpenZen.ZenError_Io_UnsupportedFunction
ZenError_Io_MsgCorrupt = _OpenZen.ZenError_Io_MsgCorrupt
ZenError_Io_MsgTooBig = _OpenZen.ZenError_Io_MsgTooBig
ZenError_Io_ExpectedAck = _OpenZen.ZenError_Io_ExpectedAck
ZenError_Io_BaudratesUnknown = _OpenZen.ZenError_Io_BaudratesUnknown
ZenError_UnknownProperty = _OpenZen.ZenError_UnknownProperty
ZenError_UnknownCommandMode = _OpenZen.ZenError_UnknownCommandMode
ZenError_UnsupportedEvent = _OpenZen.ZenError_UnsupportedEvent
ZenError_FW_FunctionFailed = _OpenZen.ZenError_FW_FunctionFailed
ZenError_Can_BusError = _OpenZen.ZenError_Can_BusError
ZenError_Can_OutOfAddresses = _OpenZen.ZenError_Can_OutOfAddresses
ZenError_Can_ResetFailed = _OpenZen.ZenError_Can_ResetFailed
ZenError_Can_AddressOutOfRange = _OpenZen.ZenError_Can_AddressOutOfRange
ZenError_InvalidClientHandle = _OpenZen.ZenError_InvalidClientHandle
ZenError_InvalidSensorHandle = _OpenZen.ZenError_InvalidSensorHandle
ZenError_InvalidComponentHandle = _OpenZen.ZenError_InvalidComponentHandle
ZenError_Max = _OpenZen.ZenError_Max
ZenSensorInitError_None = _OpenZen.ZenSensorInitError_None
ZenSensorInitError_InvalidHandle = _OpenZen.ZenSensorInitError_InvalidHandle
ZenSensorInitError_IsNull = _OpenZen.ZenSensorInitError_IsNull
ZenSensorInitError_UnknownIdentifier = _OpenZen.ZenSensorInitError_UnknownIdentifier
ZenSensorInitError_UnsupportedComponent = _OpenZen.ZenSensorInitError_UnsupportedComponent
ZenSensorInitError_UnsupportedDataFormat = _OpenZen.ZenSensorInitError_UnsupportedDataFormat
ZenSensorInitError_UnsupportedIoType = _OpenZen.ZenSensorInitError_UnsupportedIoType
ZenSensorInitError_UnsupportedProtocol = _OpenZen.ZenSensorInitError_UnsupportedProtocol
ZenSensorInitError_UnsupportedFunction = _OpenZen.ZenSensorInitError_UnsupportedFunction
ZenSensorInitError_ConnectFailed = _OpenZen.ZenSensorInitError_ConnectFailed
ZenSensorInitError_IoFailed = _OpenZen.ZenSensorInitError_IoFailed
ZenSensorInitError_RetrieveFailed = _OpenZen.ZenSensorInitError_RetrieveFailed
ZenSensorInitError_SetBaudRateFailed = _OpenZen.ZenSensorInitError_SetBaudRateFailed
ZenSensorInitError_SendFailed = _OpenZen.ZenSensorInitError_SendFailed
ZenSensorInitError_Timeout = _OpenZen.ZenSensorInitError_Timeout
ZenSensorInitError_IncompatibleBaudRates = _OpenZen.ZenSensorInitError_IncompatibleBaudRates
ZenSensorInitError_InvalidAddress = _OpenZen.ZenSensorInitError_InvalidAddress
ZenSensorInitError_InvalidConfig = _OpenZen.ZenSensorInitError_InvalidConfig
ZenSensorInitError_NoConfiguration = _OpenZen.ZenSensorInitError_NoConfiguration
ZenSensorInitError_Max = _OpenZen.ZenSensorInitError_Max
ZenAsync_Finished = _OpenZen.ZenAsync_Finished
ZenAsync_ThreadBusy = _OpenZen.ZenAsync_ThreadBusy
ZenAsync_InvalidArgument = _OpenZen.ZenAsync_InvalidArgument
ZenAsync_Updating = _OpenZen.ZenAsync_Updating
ZenAsync_Failed = _OpenZen.ZenAsync_Failed
ZenAsync_Max = _OpenZen.ZenAsync_Max
ZenLogLevel_Off = _OpenZen.ZenLogLevel_Off
ZenLogLevel_Error = _OpenZen.ZenLogLevel_Error
ZenLogLevel_Warning = _OpenZen.ZenLogLevel_Warning
ZenLogLevel_Info = _OpenZen.ZenLogLevel_Info
ZenLogLevel_Debug = _OpenZen.ZenLogLevel_Debug
ZenLogLevel_Max = _OpenZen.ZenLogLevel_Max
class ZenHeaveMotionData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    yHeave = property(_OpenZen.ZenHeaveMotionData_yHeave_get, _OpenZen.ZenHeaveMotionData_yHeave_set)

    def __init__(self):
        _OpenZen.ZenHeaveMotionData_swiginit(self, _OpenZen.new_ZenHeaveMotionData())
    __swig_destroy__ = _OpenZen.delete_ZenHeaveMotionData

# Register ZenHeaveMotionData in _OpenZen:
_OpenZen.ZenHeaveMotionData_swigregister(ZenHeaveMotionData)

class ZenImuData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    a = property(_OpenZen.ZenImuData_a_get, _OpenZen.ZenImuData_a_set)
    g = property(_OpenZen.ZenImuData_g_get, _OpenZen.ZenImuData_g_set)
    b = property(_OpenZen.ZenImuData_b_get, _OpenZen.ZenImuData_b_set)
    aRaw = property(_OpenZen.ZenImuData_aRaw_get, _OpenZen.ZenImuData_aRaw_set)
    gRaw = property(_OpenZen.ZenImuData_gRaw_get, _OpenZen.ZenImuData_gRaw_set)
    bRaw = property(_OpenZen.ZenImuData_bRaw_get, _OpenZen.ZenImuData_bRaw_set)
    w = property(_OpenZen.ZenImuData_w_get, _OpenZen.ZenImuData_w_set)
    r = property(_OpenZen.ZenImuData_r_get, _OpenZen.ZenImuData_r_set)
    q = property(_OpenZen.ZenImuData_q_get, _OpenZen.ZenImuData_q_set)
    rotationM = property(_OpenZen.ZenImuData_rotationM_get, _OpenZen.ZenImuData_rotationM_set)
    rotOffsetM = property(_OpenZen.ZenImuData_rotOffsetM_get, _OpenZen.ZenImuData_rotOffsetM_set)
    pressure = property(_OpenZen.ZenImuData_pressure_get, _OpenZen.ZenImuData_pressure_set)
    frameCount = property(_OpenZen.ZenImuData_frameCount_get, _OpenZen.ZenImuData_frameCount_set)
    linAcc = property(_OpenZen.ZenImuData_linAcc_get, _OpenZen.ZenImuData_linAcc_set)
    gTemp = property(_OpenZen.ZenImuData_gTemp_get, _OpenZen.ZenImuData_gTemp_set)
    altitude = property(_OpenZen.ZenImuData_altitude_get, _OpenZen.ZenImuData_altitude_set)
    temperature = property(_OpenZen.ZenImuData_temperature_get, _OpenZen.ZenImuData_temperature_set)
    timestamp = property(_OpenZen.ZenImuData_timestamp_get, _OpenZen.ZenImuData_timestamp_set)
    hm = property(_OpenZen.ZenImuData_hm_get, _OpenZen.ZenImuData_hm_set)

    def __init__(self):
        _OpenZen.ZenImuData_swiginit(self, _OpenZen.new_ZenImuData())
    __swig_destroy__ = _OpenZen.delete_ZenImuData

# Register ZenImuData in _OpenZen:
_OpenZen.ZenImuData_swigregister(ZenImuData)

ZenGnssFixType_NoFix = _OpenZen.ZenGnssFixType_NoFix
ZenGnssFixType_DeadReckoningOnly = _OpenZen.ZenGnssFixType_DeadReckoningOnly
ZenGnssFixType_2dFix = _OpenZen.ZenGnssFixType_2dFix
ZenGnssFixType_3dFix = _OpenZen.ZenGnssFixType_3dFix
ZenGnssFixType_GnnsAndDeadReckoning = _OpenZen.ZenGnssFixType_GnnsAndDeadReckoning
ZenGnssFixType_TimeOnlyFix = _OpenZen.ZenGnssFixType_TimeOnlyFix
ZenGnssFixType_Max = _OpenZen.ZenGnssFixType_Max
ZenGnssFixCarrierPhaseSolution_None = _OpenZen.ZenGnssFixCarrierPhaseSolution_None
ZenGnssFixCarrierPhaseSolution_FloatAmbiguities = _OpenZen.ZenGnssFixCarrierPhaseSolution_FloatAmbiguities
ZenGnssFixCarrierPhaseSolution_FixedAmbiguities = _OpenZen.ZenGnssFixCarrierPhaseSolution_FixedAmbiguities
class ZenGnssData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    timestamp = property(_OpenZen.ZenGnssData_timestamp_get, _OpenZen.ZenGnssData_timestamp_set)
    latitude = property(_OpenZen.ZenGnssData_latitude_get, _OpenZen.ZenGnssData_latitude_set)
    horizontalAccuracy = property(_OpenZen.ZenGnssData_horizontalAccuracy_get, _OpenZen.ZenGnssData_horizontalAccuracy_set)
    longitude = property(_OpenZen.ZenGnssData_longitude_get, _OpenZen.ZenGnssData_longitude_set)
    verticalAccuracy = property(_OpenZen.ZenGnssData_verticalAccuracy_get, _OpenZen.ZenGnssData_verticalAccuracy_set)
    height = property(_OpenZen.ZenGnssData_height_get, _OpenZen.ZenGnssData_height_set)
    headingOfMotion = property(_OpenZen.ZenGnssData_headingOfMotion_get, _OpenZen.ZenGnssData_headingOfMotion_set)
    headingOfVehicle = property(_OpenZen.ZenGnssData_headingOfVehicle_get, _OpenZen.ZenGnssData_headingOfVehicle_set)
    headingAccuracy = property(_OpenZen.ZenGnssData_headingAccuracy_get, _OpenZen.ZenGnssData_headingAccuracy_set)
    velocity = property(_OpenZen.ZenGnssData_velocity_get, _OpenZen.ZenGnssData_velocity_set)
    velocityAccuracy = property(_OpenZen.ZenGnssData_velocityAccuracy_get, _OpenZen.ZenGnssData_velocityAccuracy_set)
    fixType = property(_OpenZen.ZenGnssData_fixType_get, _OpenZen.ZenGnssData_fixType_set)
    carrierPhaseSolution = property(_OpenZen.ZenGnssData_carrierPhaseSolution_get, _OpenZen.ZenGnssData_carrierPhaseSolution_set)
    numberSatellitesUsed = property(_OpenZen.ZenGnssData_numberSatellitesUsed_get, _OpenZen.ZenGnssData_numberSatellitesUsed_set)
    year = property(_OpenZen.ZenGnssData_year_get, _OpenZen.ZenGnssData_year_set)
    month = property(_OpenZen.ZenGnssData_month_get, _OpenZen.ZenGnssData_month_set)
    day = property(_OpenZen.ZenGnssData_day_get, _OpenZen.ZenGnssData_day_set)
    hour = property(_OpenZen.ZenGnssData_hour_get, _OpenZen.ZenGnssData_hour_set)
    minute = property(_OpenZen.ZenGnssData_minute_get, _OpenZen.ZenGnssData_minute_set)
    second = property(_OpenZen.ZenGnssData_second_get, _OpenZen.ZenGnssData_second_set)
    nanoSecondCorrection = property(_OpenZen.ZenGnssData_nanoSecondCorrection_get, _OpenZen.ZenGnssData_nanoSecondCorrection_set)

    def __init__(self):
        _OpenZen.ZenGnssData_swiginit(self, _OpenZen.new_ZenGnssData())
    __swig_destroy__ = _OpenZen.delete_ZenGnssData

# Register ZenGnssData in _OpenZen:
_OpenZen.ZenGnssData_swigregister(ZenGnssData)

class ZenSensorDesc(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_OpenZen.ZenSensorDesc_name_get, _OpenZen.ZenSensorDesc_name_set)
    serialNumber = property(_OpenZen.ZenSensorDesc_serialNumber_get, _OpenZen.ZenSensorDesc_serialNumber_set)
    ioType = property(_OpenZen.ZenSensorDesc_ioType_get, _OpenZen.ZenSensorDesc_ioType_set)
    identifier = property(_OpenZen.ZenSensorDesc_identifier_get, _OpenZen.ZenSensorDesc_identifier_set)
    baudRate = property(_OpenZen.ZenSensorDesc_baudRate_get, _OpenZen.ZenSensorDesc_baudRate_set)

    def __init__(self):
        _OpenZen.ZenSensorDesc_swiginit(self, _OpenZen.new_ZenSensorDesc())
    __swig_destroy__ = _OpenZen.delete_ZenSensorDesc

# Register ZenSensorDesc in _OpenZen:
_OpenZen.ZenSensorDesc_swigregister(ZenSensorDesc)

class ZenEventData_SensorDisconnected(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    error = property(_OpenZen.ZenEventData_SensorDisconnected_error_get, _OpenZen.ZenEventData_SensorDisconnected_error_set)

    def __init__(self):
        _OpenZen.ZenEventData_SensorDisconnected_swiginit(self, _OpenZen.new_ZenEventData_SensorDisconnected())
    __swig_destroy__ = _OpenZen.delete_ZenEventData_SensorDisconnected

# Register ZenEventData_SensorDisconnected in _OpenZen:
_OpenZen.ZenEventData_SensorDisconnected_swigregister(ZenEventData_SensorDisconnected)

class ZenEventData_SensorListingProgress(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    progress = property(_OpenZen.ZenEventData_SensorListingProgress_progress_get, _OpenZen.ZenEventData_SensorListingProgress_progress_set)
    complete = property(_OpenZen.ZenEventData_SensorListingProgress_complete_get, _OpenZen.ZenEventData_SensorListingProgress_complete_set)

    def __init__(self):
        _OpenZen.ZenEventData_SensorListingProgress_swiginit(self, _OpenZen.new_ZenEventData_SensorListingProgress())
    __swig_destroy__ = _OpenZen.delete_ZenEventData_SensorListingProgress

# Register ZenEventData_SensorListingProgress in _OpenZen:
_OpenZen.ZenEventData_SensorListingProgress_swigregister(ZenEventData_SensorListingProgress)

class ZenEventData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    imuData = property(_OpenZen.ZenEventData_imuData_get, _OpenZen.ZenEventData_imuData_set)
    gnssData = property(_OpenZen.ZenEventData_gnssData_get, _OpenZen.ZenEventData_gnssData_set)
    sensorDisconnected = property(_OpenZen.ZenEventData_sensorDisconnected_get, _OpenZen.ZenEventData_sensorDisconnected_set)
    sensorFound = property(_OpenZen.ZenEventData_sensorFound_get, _OpenZen.ZenEventData_sensorFound_set)
    sensorListingProgress = property(_OpenZen.ZenEventData_sensorListingProgress_get, _OpenZen.ZenEventData_sensorListingProgress_set)

    def __init__(self):
        _OpenZen.ZenEventData_swiginit(self, _OpenZen.new_ZenEventData())
    __swig_destroy__ = _OpenZen.delete_ZenEventData

# Register ZenEventData in _OpenZen:
_OpenZen.ZenEventData_swigregister(ZenEventData)

class ZenEvent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    eventType = property(_OpenZen.ZenEvent_eventType_get, _OpenZen.ZenEvent_eventType_set)
    sensor = property(_OpenZen.ZenEvent_sensor_get, _OpenZen.ZenEvent_sensor_set)
    component = property(_OpenZen.ZenEvent_component_get, _OpenZen.ZenEvent_component_set)
    data = property(_OpenZen.ZenEvent_data_get, _OpenZen.ZenEvent_data_set)

    def __init__(self):
        _OpenZen.ZenEvent_swiginit(self, _OpenZen.new_ZenEvent())
    __swig_destroy__ = _OpenZen.delete_ZenEvent

# Register ZenEvent in _OpenZen:
_OpenZen.ZenEvent_swigregister(ZenEvent)

ZenSensorEvent_None = _OpenZen.ZenSensorEvent_None
ZenSensorEvent_SensorFound = _OpenZen.ZenSensorEvent_SensorFound
ZenSensorEvent_SensorListingProgress = _OpenZen.ZenSensorEvent_SensorListingProgress
ZenSensorEvent_SensorDisconnected = _OpenZen.ZenSensorEvent_SensorDisconnected
ZenSensorEvent_SensorSpecific_Start = _OpenZen.ZenSensorEvent_SensorSpecific_Start
ZenSensorEvent_SensorSpecific_End = _OpenZen.ZenSensorEvent_SensorSpecific_End
ZenSensorEvent_Max = _OpenZen.ZenSensorEvent_Max
ZenImuEvent_None = _OpenZen.ZenImuEvent_None
ZenImuEvent_Sample = _OpenZen.ZenImuEvent_Sample
ZenImuEvent_ComponentSpecific_Start = _OpenZen.ZenImuEvent_ComponentSpecific_Start
ZenImuEvent_ComponentSpecific_End = _OpenZen.ZenImuEvent_ComponentSpecific_End
ZenImuEvent_Max = _OpenZen.ZenImuEvent_Max
ZenGnssEvent_None = _OpenZen.ZenGnssEvent_None
ZenGnssEvent_Sample = _OpenZen.ZenGnssEvent_Sample
ZenGnssEvent_ComponentSpecific_Start = _OpenZen.ZenGnssEvent_ComponentSpecific_Start
ZenGnssEvent_ComponentSpecific_End = _OpenZen.ZenGnssEvent_ComponentSpecific_End
ZenGnssEvent_Max = _OpenZen.ZenGnssEvent_Max
ZenSensorProperty_Invalid = _OpenZen.ZenSensorProperty_Invalid
ZenSensorProperty_DeviceName = _OpenZen.ZenSensorProperty_DeviceName
ZenSensorProperty_FirmwareInfo = _OpenZen.ZenSensorProperty_FirmwareInfo
ZenSensorProperty_FirmwareVersion = _OpenZen.ZenSensorProperty_FirmwareVersion
ZenSensorProperty_SerialNumber = _OpenZen.ZenSensorProperty_SerialNumber
ZenSensorProperty_RestoreFactorySettings = _OpenZen.ZenSensorProperty_RestoreFactorySettings
ZenSensorProperty_StoreSettingsInFlash = _OpenZen.ZenSensorProperty_StoreSettingsInFlash
ZenSensorProperty_BatteryCharging = _OpenZen.ZenSensorProperty_BatteryCharging
ZenSensorProperty_BatteryLevel = _OpenZen.ZenSensorProperty_BatteryLevel
ZenSensorProperty_BatteryVoltage = _OpenZen.ZenSensorProperty_BatteryVoltage
ZenSensorProperty_BaudRate = _OpenZen.ZenSensorProperty_BaudRate
ZenSensorProperty_SupportedBaudRates = _OpenZen.ZenSensorProperty_SupportedBaudRates
ZenSensorProperty_DataMode = _OpenZen.ZenSensorProperty_DataMode
ZenSensorProperty_TimeOffset = _OpenZen.ZenSensorProperty_TimeOffset
ZenSensorProperty_SensorModel = _OpenZen.ZenSensorProperty_SensorModel
ZenSensorProperty_SensorSpecific_Start = _OpenZen.ZenSensorProperty_SensorSpecific_Start
ZenSensorProperty_SensorSpecific_End = _OpenZen.ZenSensorProperty_SensorSpecific_End
ZenSensorProperty_Max = _OpenZen.ZenSensorProperty_Max
ZenImuProperty_Invalid = _OpenZen.ZenImuProperty_Invalid
ZenImuProperty_StreamData = _OpenZen.ZenImuProperty_StreamData
ZenImuProperty_SamplingRate = _OpenZen.ZenImuProperty_SamplingRate
ZenImuProperty_SupportedSamplingRates = _OpenZen.ZenImuProperty_SupportedSamplingRates
ZenImuProperty_PollSensorData = _OpenZen.ZenImuProperty_PollSensorData
ZenImuProperty_CalibrateGyro = _OpenZen.ZenImuProperty_CalibrateGyro
ZenImuProperty_ResetOrientationOffset = _OpenZen.ZenImuProperty_ResetOrientationOffset
ZenImuProperty_CentricCompensationRate = _OpenZen.ZenImuProperty_CentricCompensationRate
ZenImuProperty_LinearCompensationRate = _OpenZen.ZenImuProperty_LinearCompensationRate
ZenImuProperty_FieldRadius = _OpenZen.ZenImuProperty_FieldRadius
ZenImuProperty_FilterMode = _OpenZen.ZenImuProperty_FilterMode
ZenImuProperty_SupportedFilterModes = _OpenZen.ZenImuProperty_SupportedFilterModes
ZenImuProperty_FilterPreset = _OpenZen.ZenImuProperty_FilterPreset
ZenImuProperty_OrientationOffsetMode = _OpenZen.ZenImuProperty_OrientationOffsetMode
ZenImuProperty_AccAlignment = _OpenZen.ZenImuProperty_AccAlignment
ZenImuProperty_AccBias = _OpenZen.ZenImuProperty_AccBias
ZenImuProperty_AccRange = _OpenZen.ZenImuProperty_AccRange
ZenImuProperty_AccSupportedRanges = _OpenZen.ZenImuProperty_AccSupportedRanges
ZenImuProperty_GyrAlignment = _OpenZen.ZenImuProperty_GyrAlignment
ZenImuProperty_GyrBias = _OpenZen.ZenImuProperty_GyrBias
ZenImuProperty_GyrRange = _OpenZen.ZenImuProperty_GyrRange
ZenImuProperty_GyrSupportedRanges = _OpenZen.ZenImuProperty_GyrSupportedRanges
ZenImuProperty_GyrUseAutoCalibration = _OpenZen.ZenImuProperty_GyrUseAutoCalibration
ZenImuProperty_GyrUseThreshold = _OpenZen.ZenImuProperty_GyrUseThreshold
ZenImuProperty_MagAlignment = _OpenZen.ZenImuProperty_MagAlignment
ZenImuProperty_MagBias = _OpenZen.ZenImuProperty_MagBias
ZenImuProperty_MagRange = _OpenZen.ZenImuProperty_MagRange
ZenImuProperty_MagSupportedRanges = _OpenZen.ZenImuProperty_MagSupportedRanges
ZenImuProperty_MagReference = _OpenZen.ZenImuProperty_MagReference
ZenImuProperty_MagHardIronOffset = _OpenZen.ZenImuProperty_MagHardIronOffset
ZenImuProperty_MagSoftIronMatrix = _OpenZen.ZenImuProperty_MagSoftIronMatrix
ZenImuProperty_OutputLowPrecision = _OpenZen.ZenImuProperty_OutputLowPrecision
ZenImuProperty_OutputRawAcc = _OpenZen.ZenImuProperty_OutputRawAcc
ZenImuProperty_OutputRawGyr = _OpenZen.ZenImuProperty_OutputRawGyr
ZenImuProperty_OutputRawMag = _OpenZen.ZenImuProperty_OutputRawMag
ZenImuProperty_OutputEuler = _OpenZen.ZenImuProperty_OutputEuler
ZenImuProperty_OutputQuat = _OpenZen.ZenImuProperty_OutputQuat
ZenImuProperty_OutputAngularVel = _OpenZen.ZenImuProperty_OutputAngularVel
ZenImuProperty_OutputLinearAcc = _OpenZen.ZenImuProperty_OutputLinearAcc
ZenImuProperty_OutputHeaveMotion = _OpenZen.ZenImuProperty_OutputHeaveMotion
ZenImuProperty_OutputAltitude = _OpenZen.ZenImuProperty_OutputAltitude
ZenImuProperty_OutputPressure = _OpenZen.ZenImuProperty_OutputPressure
ZenImuProperty_OutputTemperature = _OpenZen.ZenImuProperty_OutputTemperature
ZenImuProperty_OutputAccCalibrated = _OpenZen.ZenImuProperty_OutputAccCalibrated
ZenImuProperty_OutputRawGyr0 = _OpenZen.ZenImuProperty_OutputRawGyr0
ZenImuProperty_OutputRawGyr1 = _OpenZen.ZenImuProperty_OutputRawGyr1
ZenImuProperty_OutputGyr0BiasCalib = _OpenZen.ZenImuProperty_OutputGyr0BiasCalib
ZenImuProperty_OutputGyr1BiasCalib = _OpenZen.ZenImuProperty_OutputGyr1BiasCalib
ZenImuProperty_OutputGyr0AlignCalib = _OpenZen.ZenImuProperty_OutputGyr0AlignCalib
ZenImuProperty_OutputGyr1AlignCalib = _OpenZen.ZenImuProperty_OutputGyr1AlignCalib
ZenImuProperty_OutputMagCalib = _OpenZen.ZenImuProperty_OutputMagCalib
ZenImuProperty_CanChannelMode = _OpenZen.ZenImuProperty_CanChannelMode
ZenImuProperty_CanPointMode = _OpenZen.ZenImuProperty_CanPointMode
ZenImuProperty_CanStartId = _OpenZen.ZenImuProperty_CanStartId
ZenImuProperty_CanBaudrate = _OpenZen.ZenImuProperty_CanBaudrate
ZenImuProperty_CanMapping = _OpenZen.ZenImuProperty_CanMapping
ZenImuProperty_CanHeartbeat = _OpenZen.ZenImuProperty_CanHeartbeat
ZenImuProperty_UartBaudRate = _OpenZen.ZenImuProperty_UartBaudRate
ZenImuProperty_UartFormat = _OpenZen.ZenImuProperty_UartFormat
ZenImuProperty_StartSensorSync = _OpenZen.ZenImuProperty_StartSensorSync
ZenImuProperty_StopSensorSync = _OpenZen.ZenImuProperty_StopSensorSync
ZenImuProperty_Max = _OpenZen.ZenImuProperty_Max
ZenGnssProperty_Invalid = _OpenZen.ZenGnssProperty_Invalid
ZenGnnsProperty_OutputNavPvtiTOW = _OpenZen.ZenGnnsProperty_OutputNavPvtiTOW
ZenGnnsProperty_OutputNavPvtYear = _OpenZen.ZenGnnsProperty_OutputNavPvtYear
ZenGnnsProperty_OutputNavPvtMonth = _OpenZen.ZenGnnsProperty_OutputNavPvtMonth
ZenGnnsProperty_OutputNavPvtDay = _OpenZen.ZenGnnsProperty_OutputNavPvtDay
ZenGnnsProperty_OutputNavPvtHour = _OpenZen.ZenGnnsProperty_OutputNavPvtHour
ZenGnnsProperty_OutputNavPvtMinute = _OpenZen.ZenGnnsProperty_OutputNavPvtMinute
ZenGnnsProperty_OutputNavPvtSecond = _OpenZen.ZenGnnsProperty_OutputNavPvtSecond
ZenGnnsProperty_OutputNavPvtValid = _OpenZen.ZenGnnsProperty_OutputNavPvtValid
ZenGnnsProperty_OutputNavPvttAcc = _OpenZen.ZenGnnsProperty_OutputNavPvttAcc
ZenGnnsProperty_OutputNavPvtNano = _OpenZen.ZenGnnsProperty_OutputNavPvtNano
ZenGnnsProperty_OutputNavPvtFixType = _OpenZen.ZenGnnsProperty_OutputNavPvtFixType
ZenGnnsProperty_OutputNavPvtFlags = _OpenZen.ZenGnnsProperty_OutputNavPvtFlags
ZenGnnsProperty_OutputNavPvtFlags2 = _OpenZen.ZenGnnsProperty_OutputNavPvtFlags2
ZenGnnsProperty_OutputNavPvtNumSV = _OpenZen.ZenGnnsProperty_OutputNavPvtNumSV
ZenGnnsProperty_OutputNavPvtLongitude = _OpenZen.ZenGnnsProperty_OutputNavPvtLongitude
ZenGnnsProperty_OutputNavPvtLatitude = _OpenZen.ZenGnnsProperty_OutputNavPvtLatitude
ZenGnnsProperty_OutputNavPvtHeight = _OpenZen.ZenGnnsProperty_OutputNavPvtHeight
ZenGnnsProperty_OutputNavPvthMSL = _OpenZen.ZenGnnsProperty_OutputNavPvthMSL
ZenGnnsProperty_OutputNavPvthAcc = _OpenZen.ZenGnnsProperty_OutputNavPvthAcc
ZenGnnsProperty_OutputNavPvtvAcc = _OpenZen.ZenGnnsProperty_OutputNavPvtvAcc
ZenGnnsProperty_OutputNavPvtVelN = _OpenZen.ZenGnnsProperty_OutputNavPvtVelN
ZenGnnsProperty_OutputNavPvtVelE = _OpenZen.ZenGnnsProperty_OutputNavPvtVelE
ZenGnnsProperty_OutputNavPvtVelD = _OpenZen.ZenGnnsProperty_OutputNavPvtVelD
ZenGnnsProperty_OutputNavPvtgSpeed = _OpenZen.ZenGnnsProperty_OutputNavPvtgSpeed
ZenGnnsProperty_OutputNavPvtHeadMot = _OpenZen.ZenGnnsProperty_OutputNavPvtHeadMot
ZenGnnsProperty_OutputNavPvtsAcc = _OpenZen.ZenGnnsProperty_OutputNavPvtsAcc
ZenGnnsProperty_OutputNavPvtHeadAcc = _OpenZen.ZenGnnsProperty_OutputNavPvtHeadAcc
ZenGnnsProperty_OutputNavPvtpDOP = _OpenZen.ZenGnnsProperty_OutputNavPvtpDOP
ZenGnnsProperty_OutputNavPvtHeadVeh = _OpenZen.ZenGnnsProperty_OutputNavPvtHeadVeh
ZenGnnsProperty_OutputNavAttiTOW = _OpenZen.ZenGnnsProperty_OutputNavAttiTOW
ZenGnnsProperty_OutputNavAttVersion = _OpenZen.ZenGnnsProperty_OutputNavAttVersion
ZenGnnsProperty_OutputNavAttRoll = _OpenZen.ZenGnnsProperty_OutputNavAttRoll
ZenGnnsProperty_OutputNavAttPitch = _OpenZen.ZenGnnsProperty_OutputNavAttPitch
ZenGnnsProperty_OutputNavAttHeading = _OpenZen.ZenGnnsProperty_OutputNavAttHeading
ZenGnnsProperty_OutputNavAttAccRoll = _OpenZen.ZenGnnsProperty_OutputNavAttAccRoll
ZenGnnsProperty_OutputNavAttAccPitch = _OpenZen.ZenGnnsProperty_OutputNavAttAccPitch
ZenGnnsProperty_OutputNavAttAccHeading = _OpenZen.ZenGnnsProperty_OutputNavAttAccHeading
ZenGnnsProperty_OutputEsfStatusiTOW = _OpenZen.ZenGnnsProperty_OutputEsfStatusiTOW
ZenGnnsProperty_OutputEsfStatusVersion = _OpenZen.ZenGnnsProperty_OutputEsfStatusVersion
ZenGnnsProperty_OutputEsfStatusInitStatus1 = _OpenZen.ZenGnnsProperty_OutputEsfStatusInitStatus1
ZenGnnsProperty_OutputEsfStatusInitStatus2 = _OpenZen.ZenGnnsProperty_OutputEsfStatusInitStatus2
ZenGnnsProperty_OutputEsfStatusFusionMode = _OpenZen.ZenGnnsProperty_OutputEsfStatusFusionMode
ZenGnnsProperty_OutputEsfStatusNumSens = _OpenZen.ZenGnnsProperty_OutputEsfStatusNumSens
ZenGnnsProperty_OutputEsfStatusSensStatus = _OpenZen.ZenGnnsProperty_OutputEsfStatusSensStatus
ZenGnssProperty_Max = _OpenZen.ZenGnssProperty_Max
ZenOrientationOffsetMode_Object = _OpenZen.ZenOrientationOffsetMode_Object
ZenOrientationOffsetMode_Heading = _OpenZen.ZenOrientationOffsetMode_Heading
ZenOrientationOffsetMode_Alignment = _OpenZen.ZenOrientationOffsetMode_Alignment
ZenOrientationOffsetMode_Max = _OpenZen.ZenOrientationOffsetMode_Max
ZenPropertyType_Invalid = _OpenZen.ZenPropertyType_Invalid
ZenPropertyType_Byte = _OpenZen.ZenPropertyType_Byte
ZenPropertyType_Bool = _OpenZen.ZenPropertyType_Bool
ZenPropertyType_Float = _OpenZen.ZenPropertyType_Float
ZenPropertyType_Int32 = _OpenZen.ZenPropertyType_Int32
ZenPropertyType_UInt64 = _OpenZen.ZenPropertyType_UInt64
ZenPropertyType_Max = _OpenZen.ZenPropertyType_Max

def ZenInit(outHandle):
    return _OpenZen.ZenInit(outHandle)

def ZenShutdown(handle):
    return _OpenZen.ZenShutdown(handle)

def ZenSetLogLevel(logLevel):
    return _OpenZen.ZenSetLogLevel(logLevel)

def ZenListSensorsAsync(handle):
    return _OpenZen.ZenListSensorsAsync(handle)

def ZenObtainSensor(clientHandle, desc, outSensorHandle):
    return _OpenZen.ZenObtainSensor(clientHandle, desc, outSensorHandle)

def ZenObtainSensorByName(clientHandle, ioType, sensorIdentifier, baudRate, outSensorHandle):
    return _OpenZen.ZenObtainSensorByName(clientHandle, ioType, sensorIdentifier, baudRate, outSensorHandle)

def ZenReleaseSensor(clientHandle, sensorHandle):
    return _OpenZen.ZenReleaseSensor(clientHandle, sensorHandle)

def ZenPollNextEvent(handle, outEvent):
    return _OpenZen.ZenPollNextEvent(handle, outEvent)

def ZenWaitForNextEvent(handle, outEvent):
    return _OpenZen.ZenWaitForNextEvent(handle, outEvent)

def ZenPublishEvents(clientHandle, sensorHandle, endpoint):
    return _OpenZen.ZenPublishEvents(clientHandle, sensorHandle, endpoint)

def ZenSensorComponents(clientHandle, sensorHandle, type, outComponentHandles, outLength):
    return _OpenZen.ZenSensorComponents(clientHandle, sensorHandle, type, outComponentHandles, outLength)

def ZenSensorComponentsByNumber(clientHandle, sensorHandle, type, number, outComponentHandle):
    return _OpenZen.ZenSensorComponentsByNumber(clientHandle, sensorHandle, type, number, outComponentHandle)

def ZenSensorIoType(clientHandle, sensorHandle):
    return _OpenZen.ZenSensorIoType(clientHandle, sensorHandle)

def ZenSensorEquals(clientHandle, sensorHandle, desc):
    return _OpenZen.ZenSensorEquals(clientHandle, sensorHandle, desc)

def ZenSensorUpdateFirmwareAsync(clientHandle, sensorHandle, buffer, bufferSize):
    return _OpenZen.ZenSensorUpdateFirmwareAsync(clientHandle, sensorHandle, buffer, bufferSize)

def ZenSensorUpdateIAPAsync(clientHandle, sensorHandle, buffer, bufferSize):
    return _OpenZen.ZenSensorUpdateIAPAsync(clientHandle, sensorHandle, buffer, bufferSize)

def ZenSensorExecuteProperty(clientHandle, sensorHandle, property):
    return _OpenZen.ZenSensorExecuteProperty(clientHandle, sensorHandle, property)

def ZenSensorGetArrayProperty(clientHandle, sensorHandle, property, type, buffer, bufferSize):
    return _OpenZen.ZenSensorGetArrayProperty(clientHandle, sensorHandle, property, type, buffer, bufferSize)

def ZenSensorGetBoolProperty(clientHandle, sensorHandle, property, outValue):
    return _OpenZen.ZenSensorGetBoolProperty(clientHandle, sensorHandle, property, outValue)

def ZenSensorGetFloatProperty(clientHandle, sensorHandle, property, outValue):
    return _OpenZen.ZenSensorGetFloatProperty(clientHandle, sensorHandle, property, outValue)

def ZenSensorGetInt32Property(clientHandle, sensorHandle, property, outValue):
    return _OpenZen.ZenSensorGetInt32Property(clientHandle, sensorHandle, property, outValue)

def ZenSensorGetUInt64Property(clientHandle, sensorHandle, property, outValue):
    return _OpenZen.ZenSensorGetUInt64Property(clientHandle, sensorHandle, property, outValue)

def ZenSensorSetArrayProperty(clientHandle, sensorHandle, property, type, buffer, bufferSize):
    return _OpenZen.ZenSensorSetArrayProperty(clientHandle, sensorHandle, property, type, buffer, bufferSize)

def ZenSensorSetBoolProperty(clientHandle, sensorHandle, property, value):
    return _OpenZen.ZenSensorSetBoolProperty(clientHandle, sensorHandle, property, value)

def ZenSensorSetFloatProperty(clientHandle, sensorHandle, property, value):
    return _OpenZen.ZenSensorSetFloatProperty(clientHandle, sensorHandle, property, value)

def ZenSensorSetInt32Property(clientHandle, sensorHandle, property, value):
    return _OpenZen.ZenSensorSetInt32Property(clientHandle, sensorHandle, property, value)

def ZenSensorSetUInt64Property(clientHandle, sensorHandle, property, value):
    return _OpenZen.ZenSensorSetUInt64Property(clientHandle, sensorHandle, property, value)

def ZenSensorIsArrayProperty(clientHandle, sensorHandle, property):
    return _OpenZen.ZenSensorIsArrayProperty(clientHandle, sensorHandle, property)

def ZenSensorIsConstantProperty(clientHandle, sensorHandle, property):
    return _OpenZen.ZenSensorIsConstantProperty(clientHandle, sensorHandle, property)

def ZenSensorIsExecutableProperty(clientHandle, sensorHandle, property):
    return _OpenZen.ZenSensorIsExecutableProperty(clientHandle, sensorHandle, property)

def ZenSensorPropertyType(clientHandle, sensorHandle, property):
    return _OpenZen.ZenSensorPropertyType(clientHandle, sensorHandle, property)

def ZenSensorComponentType(clientHandle, sensorHandle, componentHandle):
    return _OpenZen.ZenSensorComponentType(clientHandle, sensorHandle, componentHandle)

def ZenSensorComponentExecuteProperty(clientHandle, sensorHandle, componentHandle, property):
    return _OpenZen.ZenSensorComponentExecuteProperty(clientHandle, sensorHandle, componentHandle, property)

def ZenSensorComponentGetArrayProperty(clientHandle, sensorHandle, componentHandle, property, type, buffer, bufferSize):
    return _OpenZen.ZenSensorComponentGetArrayProperty(clientHandle, sensorHandle, componentHandle, property, type, buffer, bufferSize)

def ZenSensorComponentGetBoolProperty(clientHandle, sensorHandle, componentHandle, property, outValue):
    return _OpenZen.ZenSensorComponentGetBoolProperty(clientHandle, sensorHandle, componentHandle, property, outValue)

def ZenSensorComponentGetFloatProperty(clientHandle, sensorHandle, componentHandle, property, outValue):
    return _OpenZen.ZenSensorComponentGetFloatProperty(clientHandle, sensorHandle, componentHandle, property, outValue)

def ZenSensorComponentGetInt32Property(clientHandle, sensorHandle, componentHandle, property, outValue):
    return _OpenZen.ZenSensorComponentGetInt32Property(clientHandle, sensorHandle, componentHandle, property, outValue)

def ZenSensorComponentGetUInt64Property(clientHandle, sensorHandle, componentHandle, property, outValue):
    return _OpenZen.ZenSensorComponentGetUInt64Property(clientHandle, sensorHandle, componentHandle, property, outValue)

def ZenSensorComponentSetArrayProperty(clientHandle, sensorHandle, componentHandle, property, type, buffer, bufferSize):
    return _OpenZen.ZenSensorComponentSetArrayProperty(clientHandle, sensorHandle, componentHandle, property, type, buffer, bufferSize)

def ZenSensorComponentSetBoolProperty(clientHandle, sensorHandle, componentHandle, property, value):
    return _OpenZen.ZenSensorComponentSetBoolProperty(clientHandle, sensorHandle, componentHandle, property, value)

def ZenSensorComponentSetFloatProperty(clientHandle, sensorHandle, componentHandle, property, value):
    return _OpenZen.ZenSensorComponentSetFloatProperty(clientHandle, sensorHandle, componentHandle, property, value)

def ZenSensorComponentSetInt32Property(clientHandle, sensorHandle, componentHandle, property, value):
    return _OpenZen.ZenSensorComponentSetInt32Property(clientHandle, sensorHandle, componentHandle, property, value)

def ZenSensorComponentSetUInt64Property(clientHandle, sensorHandle, componentHandle, property, value):
    return _OpenZen.ZenSensorComponentSetUInt64Property(clientHandle, sensorHandle, componentHandle, property, value)

def ZenSensorComponentIsArrayProperty(clientHandle, sensorHandle, componentHandle, property):
    return _OpenZen.ZenSensorComponentIsArrayProperty(clientHandle, sensorHandle, componentHandle, property)

def ZenSensorComponentIsConstantProperty(clientHandle, sensorHandle, componentHandle, property):
    return _OpenZen.ZenSensorComponentIsConstantProperty(clientHandle, sensorHandle, componentHandle, property)

def ZenSensorComponentIsExecutableProperty(clientHandle, sensorHandle, componentHandle, property):
    return _OpenZen.ZenSensorComponentIsExecutableProperty(clientHandle, sensorHandle, componentHandle, property)

def ZenSensorComponentPropertyType(clientHandle, sensorHandle, componentHandle, property):
    return _OpenZen.ZenSensorComponentPropertyType(clientHandle, sensorHandle, componentHandle, property)

def ZenSensorComponentGnnsForwardRtkCorrections(clientHandle, sensorHandle, componentHandle, rtkCorrectionSource, hostname, port):
    return _OpenZen.ZenSensorComponentGnnsForwardRtkCorrections(clientHandle, sensorHandle, componentHandle, rtkCorrectionSource, hostname, port)

cvar = _OpenZen.cvar
g_zenSensorType_Imu = cvar.g_zenSensorType_Imu
g_zenSensorType_Gnss = cvar.g_zenSensorType_Gnss

