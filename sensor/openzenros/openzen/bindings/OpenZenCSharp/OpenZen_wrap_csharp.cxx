/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGCSHARP
#define SWIGCSHARP
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_OpenZen(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_OpenZen(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_OpenZen(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else


typedef float OpenZenFloatArray;

SWIGINTERN OpenZenFloatArray *new_OpenZenFloatArray(int nelements){
  return new float[nelements]();
}
SWIGINTERN void delete_OpenZenFloatArray(OpenZenFloatArray *self){
  delete [] self;
}
SWIGINTERN float OpenZenFloatArray_getitem(OpenZenFloatArray *self,int index){
  return self[index];
}
SWIGINTERN void OpenZenFloatArray_setitem(OpenZenFloatArray *self,int index,float value){
  self[index] = value;
}
SWIGINTERN float *OpenZenFloatArray_cast(OpenZenFloatArray *self){
  return self;
}
SWIGINTERN OpenZenFloatArray *OpenZenFloatArray_frompointer(float *t){
  return (OpenZenFloatArray *) t;
}

#include <stdint.h>		// Use the C99 official header

#include "../include/ZenTypes.h"
#include "../include/OpenZenCAPI.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void * SWIGSTDCALL CSharp_new_OpenZenFloatArray(int jarg1) { void * jresult ; int arg1 ;
  OpenZenFloatArray *result = 0 ; arg1 = (int)jarg1;  result = (OpenZenFloatArray *)new_OpenZenFloatArray(arg1);
  jresult = (void *)result;  return jresult; }
SWIGEXPORT void SWIGSTDCALL CSharp_delete_OpenZenFloatArray(void * jarg1) { OpenZenFloatArray *arg1 = (OpenZenFloatArray *) 0 ;
  arg1 = (OpenZenFloatArray *)jarg1;  delete_OpenZenFloatArray(arg1); }
SWIGEXPORT float SWIGSTDCALL CSharp_OpenZenFloatArray_getitem(void * jarg1, int jarg2) { float jresult ;
  OpenZenFloatArray *arg1 = (OpenZenFloatArray *) 0 ; int arg2 ; float result; arg1 = (OpenZenFloatArray *)jarg1; 
  arg2 = (int)jarg2;  result = (float)OpenZenFloatArray_getitem(arg1,arg2); jresult = result;  return jresult; }
SWIGEXPORT void SWIGSTDCALL CSharp_OpenZenFloatArray_setitem(void * jarg1, int jarg2, float jarg3) {
  OpenZenFloatArray *arg1 = (OpenZenFloatArray *) 0 ; int arg2 ; float arg3 ; arg1 = (OpenZenFloatArray *)jarg1; 
  arg2 = (int)jarg2;  arg3 = (float)jarg3;  OpenZenFloatArray_setitem(arg1,arg2,arg3); }
SWIGEXPORT void * SWIGSTDCALL CSharp_OpenZenFloatArray_cast(void * jarg1) { void * jresult ;
  OpenZenFloatArray *arg1 = (OpenZenFloatArray *) 0 ; float *result = 0 ; arg1 = (OpenZenFloatArray *)jarg1; 
  result = (float *)OpenZenFloatArray_cast(arg1); jresult = (void *)result;  return jresult; }
SWIGEXPORT void * SWIGSTDCALL CSharp_OpenZenFloatArray_frompointer(void * jarg1) { void * jresult ; float *arg1 = (float *) 0 ;
  OpenZenFloatArray *result = 0 ; arg1 = (float *)jarg1;  result = (OpenZenFloatArray *)OpenZenFloatArray_frompointer(arg1);
  jresult = (void *)result;  return jresult; }
SWIGEXPORT void SWIGSTDCALL CSharp_ZenClientHandle_t_handle_set(void * jarg1, unsigned long jarg2) {
  ZenClientHandle *arg1 = (ZenClientHandle *) 0 ; uintptr_t arg2 ; arg1 = (ZenClientHandle *)jarg1;  arg2 = (uintptr_t)jarg2; 
  if (arg1) (arg1)->handle = arg2; }
SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ZenClientHandle_t_handle_get(void * jarg1) { unsigned long jresult ;
  ZenClientHandle *arg1 = (ZenClientHandle *) 0 ; uintptr_t result; arg1 = (ZenClientHandle *)jarg1; 
  result = (uintptr_t) ((arg1)->handle); jresult = (unsigned long)result;  return jresult; }
SWIGEXPORT void * SWIGSTDCALL CSharp_new_ZenClientHandle_t() { void * jresult ; ZenClientHandle *result = 0 ;
  result = (ZenClientHandle *)new ZenClientHandle(); jresult = (void *)result;  return jresult; }
SWIGEXPORT void SWIGSTDCALL CSharp_delete_ZenClientHandle_t(void * jarg1) { ZenClientHandle *arg1 = (ZenClientHandle *) 0 ;
  arg1 = (ZenClientHandle *)jarg1;  delete arg1; }
SWIGEXPORT void SWIGSTDCALL CSharp_ZenSensorHandle_t_handle_set(void * jarg1, unsigned long jarg2) {
  ZenSensorHandle *arg1 = (ZenSensorHandle *) 0 ; uintptr_t arg2 ; arg1 = (ZenSensorHandle *)jarg1;  arg2 = (uintptr_t)jarg2; 
  if (arg1) (arg1)->handle = arg2; }
SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ZenSensorHandle_t_handle_get(void * jarg1) { unsigned long jresult ;
  ZenSensorHandle *arg1 = (ZenSensorHandle *) 0 ; uintptr_t result; arg1 = (ZenSensorHandle *)jarg1; 
  result = (uintptr_t) ((arg1)->handle); jresult = (unsigned long)result;  return jresult; }
SWIGEXPORT void * SWIGSTDCALL CSharp_new_ZenSensorHandle_t() { void * jresult ; ZenSensorHandle *result = 0 ;
  result = (ZenSensorHandle *)new ZenSensorHandle(); jresult = (void *)result;  return jresult; }
SWIGEXPORT void SWIGSTDCALL CSharp_delete_ZenSensorHandle_t(void * jarg1) { ZenSensorHandle *arg1 = (ZenSensorHandle *) 0 ;
  arg1 = (ZenSensorHandle *)jarg1;  delete arg1; }
SWIGEXPORT void SWIGSTDCALL CSharp_ZenComponentHandle_t_handle_set(void * jarg1, unsigned long jarg2) {
  ZenComponentHandle *arg1 = (ZenComponentHandle *) 0 ; uintptr_t arg2 ; arg1 = (ZenComponentHandle *)jarg1; 
  arg2 = (uintptr_t)jarg2;  if (arg1) (arg1)->handle = arg2; }
SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ZenComponentHandle_t_handle_get(void * jarg1) { unsigned long jresult ;
  ZenComponentHandle *arg1 = (ZenComponentHandle *) 0 ; uintptr_t result; arg1 = (ZenComponentHandle *)jarg1; 
  result = (uintptr_t) ((arg1)->handle); jresult = (unsigned long)result;  return jresult; }
SWIGEXPORT void * SWIGSTDCALL CSharp_new_ZenComponentHandle_t() { void * jresult ; ZenComponentHandle *result = 0 ;
  result = (ZenComponentHandle *)new ZenComponentHandle(); jresult = (void *)result;  return jresult; }
SWIGEXPORT void SWIGSTDCALL CSharp_delete_ZenComponentHandle_t(void * jarg1) {
  ZenComponentHandle *arg1 = (ZenComponentHandle *) 0 ; arg1 = (ZenComponentHandle *)jarg1;  delete arg1; }
SWIGEXPORT void SWIGSTDCALL CSharp_ZenHeaveMotionData_yHeave_set(void * jarg1, float jarg2) {
  ZenHeaveMotionData *arg1 = (ZenHeaveMotionData *) 0 ; float arg2 ; arg1 = (ZenHeaveMotionData *)jarg1;  arg2 = (float)jarg2; 
  if (arg1) (arg1)->yHeave = arg2; }
SWIGEXPORT float SWIGSTDCALL CSharp_ZenHeaveMotionData_yHeave_get(void * jarg1) { float jresult ;
  ZenHeaveMotionData *arg1 = (ZenHeaveMotionData *) 0 ; float result; arg1 = (ZenHeaveMotionData *)jarg1; 
  result = (float) ((arg1)->yHeave); jresult = result;  return jresult; }
SWIGEXPORT void * SWIGSTDCALL CSharp_new_ZenHeaveMotionData() { void * jresult ; ZenHeaveMotionData *result = 0 ;
  result = (ZenHeaveMotionData *)new ZenHeaveMotionData(); jresult = (void *)result;  return jresult; }
SWIGEXPORT void SWIGSTDCALL CSharp_delete_ZenHeaveMotionData(void * jarg1) {
  ZenHeaveMotionData *arg1 = (ZenHeaveMotionData *) 0 ; arg1 = (ZenHeaveMotionData *)jarg1;  delete arg1; }
SWIGEXPORT void SWIGSTDCALL CSharp_ZenImuData_a_set(void * jarg1, void * jarg2) { ZenImuData *arg1 = (ZenImuData *) 0 ;
  float *arg2 ; arg1 = (ZenImuData *)jarg1;  arg2 = (float *)jarg2;  { size_t ii; float *b = (float *) arg1->a;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((float *) arg2 + ii); }  }
SWIGEXPORT void * SWIGSTDCALL CSharp_ZenImuData_a_get(void * jarg1) { void * jresult ; ZenImuData *arg1 = (ZenImuData *) 0 ;
  float *result = 0 ; arg1 = (ZenImuData *)jarg1;  result = (float *)(float *) ((arg1)->a); jresult = result;  return jresult; }
SWIGEXPORT void SWIGSTDCALL CSharp_ZenImuData_g_set(void * jarg1, void * jarg2) { ZenImuData *arg1 = (ZenImuData *) 0 ;
  float *arg2 ; arg1 = (ZenImuData *)jarg1;  arg2 = (float *)jarg2;  { size_t ii; float *b = (float *) arg1->g;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((float *) arg2 + ii); }  }
SWIGEXPORT void * SWIGSTDCALL CSharp_ZenImuData_g_get(void * jarg1) { void * jresult ; ZenImuData *arg1 = (ZenImuData *) 0 ;
  float *result = 0 ; arg1 = (ZenImuData *)jarg1;  result = (float *)(float *) ((arg1)->g); jresult = result;  return jresult; }
SWIGEXPORT void SWIGSTDCALL CSharp_ZenImuData_b_set(void * jarg1, void * jarg2) { ZenImuData *arg1 = (ZenImuData *) 0 ;
  float *arg2 ; arg1 = (ZenImuData *)jarg1;  arg2 = (float *)jarg2;  { size_t ii; float *b = (float *) arg1->b;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((float *) arg2 + ii); }  }
SWIGEXPORT void * SWIGSTDCALL CSharp_ZenImuData_b_get(void * jarg1) { void * jresult ; ZenImuData *arg1 = (ZenImuData *) 0 ;
  float *result = 0 ; arg1 = (ZenImuData *)jarg1;  result = (float *)(float *) ((arg1)->b); jresult = result;  return jresult; }
SWIGEXPORT void SWIGSTDCALL CSharp_ZenImuData_aRaw_set(void * jarg1, void * jarg2) { ZenImuData *arg1 = (ZenImuData *) 0 ;
  float *arg2 ; arg1 = (ZenImuData *)jarg1;  arg2 = (float *)jarg2;  { size_t ii; float *b = (float *) arg1->aRaw;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((float *) arg2 + ii); }  }
SWIGEXPORT void * SWIGSTDCALL CSharp_ZenImuData_aRaw_get(void * jarg1) { void * jresult ; ZenImuData *arg1 = (ZenImuData *) 0 ;
  float *result = 0 ; arg1 = (ZenImuData *)jarg1;  result = (float *)(float *) ((arg1)->aRaw); jresult = result; 
  return jresult; }
SWIGEXPORT void SWIGSTDCALL CSharp_ZenImuData_gRaw_set(void * jarg1, void * jarg2) { ZenImuData *arg1 = (ZenImuData *) 0 ;
  float *arg2 ; arg1 = (ZenImuData *)jarg1;  arg2 = (float *)jarg2;  { size_t ii; float *b = (float *) arg1->gRaw;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((float *) arg2 + ii); }  }
SWIGEXPORT void * SWIGSTDCALL CSharp_ZenImuData_gRaw_get(void * jarg1) { void * jresult ; ZenImuData *arg1 = (ZenImuData *) 0 ;
  float *result = 0 ; arg1 = (ZenImuData *)jarg1;  result = (float *)(float *) ((arg1)->gRaw); jresult = result; 
  return jresult; }
SWIGEXPORT void SWIGSTDCALL CSharp_ZenImuData_bRaw_set(void * jarg1, void * jarg2) { ZenImuData *arg1 = (ZenImuData *) 0 ;
  float *arg2 ; arg1 = (ZenImuData *)jarg1;  arg2 = (float *)jarg2;  { size_t ii; float *b = (float *) arg1->bRaw;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((float *) arg2 + ii); }  }
SWIGEXPORT void * SWIGSTDCALL CSharp_ZenImuData_bRaw_get(void * jarg1) { void * jresult ; ZenImuData *arg1 = (ZenImuData *) 0 ;
  float *result = 0 ; arg1 = (ZenImuData *)jarg1;  result = (float *)(float *) ((arg1)->bRaw); jresult = result; 
  return jresult; }
SWIGEXPORT void SWIGSTDCALL CSharp_ZenImuData_w_set(void * jarg1, void * jarg2) { ZenImuData *arg1 = (ZenImuData *) 0 ;
  float *arg2 ; arg1 = (ZenImuData *)jarg1;  arg2 = (float *)jarg2;  { size_t ii; float *b = (float *) arg1->w;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((float *) arg2 + ii); }  }
SWIGEXPORT void * SWIGSTDCALL CSharp_ZenImuData_w_get(void * jarg1) { void * jresult ; ZenImuData *arg1 = (ZenImuData *) 0 ;
  float *result = 0 ; arg1 = (ZenImuData *)jarg1;  result = (float *)(float *) ((arg1)->w); jresult = result;  return jresult; }
SWIGEXPORT void SWIGSTDCALL CSharp_ZenImuData_r_set(void * jarg1, void * jarg2) { ZenImuData *arg1 = (ZenImuData *) 0 ;
  float *arg2 ; arg1 = (ZenImuData *)jarg1;  arg2 = (float *)jarg2;  { size_t ii; float *b = (float *) arg1->r;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((float *) arg2 + ii); }  }
SWIGEXPORT void * SWIGSTDCALL CSharp_ZenImuData_r_get(void * jarg1) { void * jresult ; ZenImuData *arg1 = (ZenImuData *) 0 ;
  float *result = 0 ; arg1 = (ZenImuData *)jarg1;  result = (float *)(float *) ((arg1)->r); jresult = result;  return jresult; }
SWIGEXPORT void SWIGSTDCALL CSharp_ZenImuData_q_set(void * jarg1, void * jarg2) { ZenImuData *arg1 = (ZenImuData *) 0 ;
  float *arg2 ; arg1 = (ZenImuData *)jarg1;  arg2 = (float *)jarg2;  { size_t ii; float *b = (float *) arg1->q;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((float *) arg2 + ii); }  }
SWIGEXPORT void * SWIGSTDCALL CSharp_ZenImuData_q_get(void * jarg1) { void * jresult ; ZenImuData *arg1 = (ZenImuData *) 0 ;
  float *result = 0 ; arg1 = (ZenImuData *)jarg1;  result = (float *)(float *) ((arg1)->q); jresult = result;  return jresult; }
SWIGEXPORT void SWIGSTDCALL CSharp_ZenImuData_rotationM_set(void * jarg1, void * jarg2) { ZenImuData *arg1 = (ZenImuData *) 0 ;
  float *arg2 ; arg1 = (ZenImuData *)jarg1;  arg2 = (float *)jarg2;  { size_t ii; float *b = (float *) arg1->rotationM;
    for (ii = 0; ii < (size_t)9; ii++) b[ii] = *((float *) arg2 + ii); }  }
SWIGEXPORT void * SWIGSTDCALL CSharp_ZenImuData_rotationM_get(void * jarg1) { void * jresult ;
  ZenImuData *arg1 = (ZenImuData *) 0 ; float *result = 0 ; arg1 = (ZenImuData *)jarg1; 
  result = (float *)(float *) ((arg1)->rotationM); jresult = result;  return jresult; }
SWIGEXPORT void SWIGSTDCALL CSharp_ZenImuData_rotOffsetM_set(void * jarg1, void * jarg2) { ZenImuData *arg1 = (ZenImuData *) 0 ;
  float *arg2 ; arg1 = (ZenImuData *)jarg1;  arg2 = (float *)jarg2;  { size_t ii; float *b = (float *) arg1->rotOffsetM;
    for (ii = 0; ii < (size_t)9; ii++) b[ii] = *((float *) arg2 + ii); }  }
SWIGEXPORT void * SWIGSTDCALL CSharp_ZenImuData_rotOffsetM_get(void * jarg1) { void * jresult ;
  ZenImuData *arg1 = (ZenImuData *) 0 ; float *result = 0 ; arg1 = (ZenImuData *)jarg1; 
  result = (float *)(float *) ((arg1)->rotOffsetM); jresult = result;  return jresult; }
SWIGEXPORT void SWIGSTDCALL CSharp_ZenImuData_pressure_set(void * jarg1, float jarg2) { ZenImuData *arg1 = (ZenImuData *) 0 ;
  float arg2 ; arg1 = (ZenImuData *)jarg1;  arg2 = (float)jarg2;  if (arg1) (arg1)->pressure = arg2; }
SWIGEXPORT float SWIGSTDCALL CSharp_ZenImuData_pressure_get(void * jarg1) { float jresult ;
  ZenImuData *arg1 = (ZenImuData *) 0 ; float result; arg1 = (ZenImuData *)jarg1;  result = (float) ((arg1)->pressure);
  jresult = result;  return jresult; }
SWIGEXPORT void SWIGSTDCALL CSharp_ZenImuData_frameCount_set(void * jarg1, int jarg2) { ZenImuData *arg1 = (ZenImuData *) 0 ;
  int arg2 ; arg1 = (ZenImuData *)jarg1;  arg2 = (int)jarg2;  if (arg1) (arg1)->frameCount = arg2; }
SWIGEXPORT int SWIGSTDCALL CSharp_ZenImuData_frameCount_get(void * jarg1) { int jresult ; ZenImuData *arg1 = (ZenImuData *) 0 ;
  int result; arg1 = (ZenImuData *)jarg1;  result = (int) ((arg1)->frameCount); jresult = result;  return jresult; }
SWIGEXPORT void SWIGSTDCALL CSharp_ZenImuData_linAcc_set(void * jarg1, void * jarg2) { ZenImuData *arg1 = (ZenImuData *) 0 ;
  float *arg2 ; arg1 = (ZenImuData *)jarg1;  arg2 = (float *)jarg2;  { size_t ii; float *b = (float *) arg1->linAcc;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((float *) arg2 + ii); }  }
SWIGEXPORT void * SWIGSTDCALL CSharp_ZenImuData_linAcc_get(void * jarg1) { void * jresult ;
  ZenImuData *arg1 = (ZenImuData *) 0 ; float *result = 0 ; arg1 = (ZenImuData *)jarg1; 
  result = (float *)(float *) ((arg1)->linAcc); jresult = result;  return jresult; }
SWIGEXPORT void SWIGSTDCALL CSharp_ZenImuData_gTemp_set(void * jarg1, float jarg2) { ZenImuData *arg1 = (ZenImuData *) 0 ;
  float arg2 ; arg1 = (ZenImuData *)jarg1;  arg2 = (float)jarg2;  if (arg1) (arg1)->gTemp = arg2; }
SWIGEXPORT float SWIGSTDCALL CSharp_ZenImuData_gTemp_get(void * jarg1) { float jresult ; ZenImuData *arg1 = (ZenImuData *) 0 ;
  float result; arg1 = (ZenImuData *)jarg1;  result = (float) ((arg1)->gTemp); jresult = result;  return jresult; }
SWIGEXPORT void SWIGSTDCALL CSharp_ZenImuData_altitude_set(void * jarg1, float jarg2) { ZenImuData *arg1 = (ZenImuData *) 0 ;
  float arg2 ; arg1 = (ZenImuData *)jarg1;  arg2 = (float)jarg2;  if (arg1) (arg1)->altitude = arg2; }
SWIGEXPORT float SWIGSTDCALL CSharp_ZenImuData_altitude_get(void * jarg1) { float jresult ;
  ZenImuData *arg1 = (ZenImuData *) 0 ; float result; arg1 = (ZenImuData *)jarg1;  result = (float) ((arg1)->altitude);
  jresult = result;  return jresult; }
SWIGEXPORT void SWIGSTDCALL CSharp_ZenImuData_temperature_set(void * jarg1, float jarg2) { ZenImuData *arg1 = (ZenImuData *) 0 ;
  float arg2 ; arg1 = (ZenImuData *)jarg1;  arg2 = (float)jarg2;  if (arg1) (arg1)->temperature = arg2; }
SWIGEXPORT float SWIGSTDCALL CSharp_ZenImuData_temperature_get(void * jarg1) { float jresult ;
  ZenImuData *arg1 = (ZenImuData *) 0 ; float result; arg1 = (ZenImuData *)jarg1;  result = (float) ((arg1)->temperature);
  jresult = result;  return jresult; }
SWIGEXPORT void SWIGSTDCALL CSharp_ZenImuData_timestamp_set(void * jarg1, double jarg2) { ZenImuData *arg1 = (ZenImuData *) 0 ;
  double arg2 ; arg1 = (ZenImuData *)jarg1;  arg2 = (double)jarg2;  if (arg1) (arg1)->timestamp = arg2; }
SWIGEXPORT double SWIGSTDCALL CSharp_ZenImuData_timestamp_get(void * jarg1) { double jresult ;
  ZenImuData *arg1 = (ZenImuData *) 0 ; double result; arg1 = (ZenImuData *)jarg1;  result = (double) ((arg1)->timestamp);
  jresult = result;  return jresult; }
SWIGEXPORT void SWIGSTDCALL CSharp_ZenImuData_hm_set(void * jarg1, void * jarg2) { ZenImuData *arg1 = (ZenImuData *) 0 ;
  ZenHeaveMotionData *arg2 = (ZenHeaveMotionData *) 0 ; arg1 = (ZenImuData *)jarg1;  arg2 = (ZenHeaveMotionData *)jarg2; 
  if (arg1) (arg1)->hm = *arg2; }
SWIGEXPORT void * SWIGSTDCALL CSharp_ZenImuData_hm_get(void * jarg1) { void * jresult ; ZenImuData *arg1 = (ZenImuData *) 0 ;
  ZenHeaveMotionData *result = 0 ; arg1 = (ZenImuData *)jarg1;  result = (ZenHeaveMotionData *)& ((arg1)->hm);
  jresult = (void *)result;  return jresult; }
SWIGEXPORT void * SWIGSTDCALL CSharp_new_ZenImuData() { void * jresult ; ZenImuData *result = 0 ;
  result = (ZenImuData *)new ZenImuData(); jresult = (void *)result;  return jresult; }
SWIGEXPORT void SWIGSTDCALL CSharp_delete_ZenImuData(void * jarg1) { ZenImuData *arg1 = (ZenImuData *) 0 ;
  arg1 = (ZenImuData *)jarg1;  delete arg1; }
SWIGEXPORT void SWIGSTDCALL CSharp_ZenGnssData_timestamp_set(void * jarg1, double jarg2) {
  ZenGnssData *arg1 = (ZenGnssData *) 0 ; double arg2 ; arg1 = (ZenGnssData *)jarg1;  arg2 = (double)jarg2; 
  if (arg1) (arg1)->timestamp = arg2; }
SWIGEXPORT double SWIGSTDCALL CSharp_ZenGnssData_timestamp_get(void * jarg1) { double jresult ;
  ZenGnssData *arg1 = (ZenGnssData *) 0 ; double result; arg1 = (ZenGnssData *)jarg1;  result = (double) ((arg1)->timestamp);
  jresult = result;  return jresult; }
SWIGEXPORT void SWIGSTDCALL CSharp_ZenGnssData_latitude_set(void * jarg1, double jarg2) {
  ZenGnssData *arg1 = (ZenGnssData *) 0 ; double arg2 ; arg1 = (ZenGnssData *)jarg1;  arg2 = (double)jarg2; 
  if (arg1) (arg1)->latitude = arg2; }
SWIGEXPORT double SWIGSTDCALL CSharp_ZenGnssData_latitude_get(void * jarg1) { double jresult ;
  ZenGnssData *arg1 = (ZenGnssData *) 0 ; double result; arg1 = (ZenGnssData *)jarg1;  result = (double) ((arg1)->latitude);
  jresult = result;  return jresult; }
SWIGEXPORT void SWIGSTDCALL CSharp_ZenGnssData_horizontalAccuracy_set(void * jarg1, double jarg2) {
  ZenGnssData *arg1 = (ZenGnssData *) 0 ; double arg2 ; arg1 = (ZenGnssData *)jarg1;  arg2 = (double)jarg2; 
  if (arg1) (arg1)->horizontalAccuracy = arg2; }
SWIGEXPORT double SWIGSTDCALL CSharp_ZenGnssData_horizontalAccuracy_get(void * jarg1) { double jresult ;
  ZenGnssData *arg1 = (ZenGnssData *) 0 ; double result; arg1 = (ZenGnssData *)jarg1; 
  result = (double) ((arg1)->horizontalAccuracy); jresult = result;  return jresult; }
SWIGEXPORT void SWIGSTDCALL CSharp_ZenGnssData_longitude_set(void * jarg1, double jarg2) {
  ZenGnssData *arg1 = (ZenGnssData *) 0 ; double arg2 ; arg1 = (ZenGnssData *)jarg1;  arg2 = (double)jarg2; 
  if (arg1) (arg1)->longitude = arg2; }
SWIGEXPORT double SWIGSTDCALL CSharp_ZenGnssData_longitude_get(void * jarg1) { double jresult ;
  ZenGnssData *arg1 = (ZenGnssData *) 0 ; double result; arg1 = (ZenGnssData *)jarg1;  result = (double) ((arg1)->longitude);
  jresult = result;  return jresult; }
SWIGEXPORT void SWIGSTDCALL CSharp_ZenGnssData_verticalAccuracy_set(void * jarg1, double jarg2) {
  ZenGnssData *arg1 = (ZenGnssData *) 0 ; double arg2 ; arg1 = (ZenGnssData *)jarg1;  arg2 = (double)jarg2; 
  if (arg1) (arg1)->verticalAccuracy = arg2; }
SWIGEXPORT double SWIGSTDCALL CSharp_ZenGnssData_verticalAccuracy_get(void * jarg1) { double jresult ;
  ZenGnssData *arg1 = (ZenGnssData *) 0 ; double result; arg1 = (ZenGnssData *)jarg1; 
  result = (double) ((arg1)->verticalAccuracy); jresult = result;  return jresult; }
SWIGEXPORT void SWIGSTDCALL CSharp_ZenGnssData_height_set(void * jarg1, double jarg2) { ZenGnssData *arg1 = (ZenGnssData *) 0 ;
  double arg2 ; arg1 = (ZenGnssData *)jarg1;  arg2 = (double)jarg2;  if (arg1) (arg1)->height = arg2; }
SWIGEXPORT double SWIGSTDCALL CSharp_ZenGnssData_height_get(void * jarg1) { double jresult ;
  ZenGnssData *arg1 = (ZenGnssData *) 0 ; double result; arg1 = (ZenGnssData *)jarg1;  result = (double) ((arg1)->height);
  jresult = result;  return jresult; }
SWIGEXPORT void SWIGSTDCALL CSharp_ZenGnssData_headingOfMotion_set(void * jarg1, double jarg2) {
  ZenGnssData *arg1 = (ZenGnssData *) 0 ; double arg2 ; arg1 = (ZenGnssData *)jarg1;  arg2 = (double)jarg2; 
  if (arg1) (arg1)->headingOfMotion = arg2; }
SWIGEXPORT double SWIGSTDCALL CSharp_ZenGnssData_headingOfMotion_get(void * jarg1) { double jresult ;
  ZenGnssData *arg1 = (ZenGnssData *) 0 ; double result; arg1 = (ZenGnssData *)jarg1; 
  result = (double) ((arg1)->headingOfMotion); jresult = result;  return jresult; }
SWIGEXPORT void SWIGSTDCALL CSharp_ZenGnssData_headingOfVehicle_set(void * jarg1, double jarg2) {
  ZenGnssData *arg1 = (ZenGnssData *) 0 ; double arg2 ; arg1 = (ZenGnssData *)jarg1;  arg2 = (double)jarg2; 
  if (arg1) (arg1)->headingOfVehicle = arg2; }
SWIGEXPORT double SWIGSTDCALL CSharp_ZenGnssData_headingOfVehicle_get(void * jarg1) { double jresult ;
  ZenGnssData *arg1 = (ZenGnssData *) 0 ; double result; arg1 = (ZenGnssData *)jarg1; 
  result = (double) ((arg1)->headingOfVehicle); jresult = result;  return jresult; }
SWIGEXPORT void SWIGSTDCALL CSharp_ZenGnssData_headingAccuracy_set(void * jarg1, double jarg2) {
  ZenGnssData *arg1 = (ZenGnssData *) 0 ; double arg2 ; arg1 = (ZenGnssData *)jarg1;  arg2 = (double)jarg2; 
  if (arg1) (arg1)->headingAccuracy = arg2; }
SWIGEXPORT double SWIGSTDCALL CSharp_ZenGnssData_headingAccuracy_get(void * jarg1) { double jresult ;
  ZenGnssData *arg1 = (ZenGnssData *) 0 ; double result; arg1 = (ZenGnssData *)jarg1; 
  result = (double) ((arg1)->headingAccuracy); jresult = result;  return jresult; }
SWIGEXPORT void SWIGSTDCALL CSharp_ZenGnssData_velocity_set(void * jarg1, double jarg2) {
  ZenGnssData *arg1 = (ZenGnssData *) 0 ; double arg2 ; arg1 = (ZenGnssData *)jarg1;  arg2 = (double)jarg2; 
  if (arg1) (arg1)->velocity = arg2; }
SWIGEXPORT double SWIGSTDCALL CSharp_ZenGnssData_velocity_get(void * jarg1) { double jresult ;
  ZenGnssData *arg1 = (ZenGnssData *) 0 ; double result; arg1 = (ZenGnssData *)jarg1;  result = (double) ((arg1)->velocity);
  jresult = result;  return jresult; }
SWIGEXPORT void SWIGSTDCALL CSharp_ZenGnssData_velocityAccuracy_set(void * jarg1, double jarg2) {
  ZenGnssData *arg1 = (ZenGnssData *) 0 ; double arg2 ; arg1 = (ZenGnssData *)jarg1;  arg2 = (double)jarg2; 
  if (arg1) (arg1)->velocityAccuracy = arg2; }
SWIGEXPORT double SWIGSTDCALL CSharp_ZenGnssData_velocityAccuracy_get(void * jarg1) { double jresult ;
  ZenGnssData *arg1 = (ZenGnssData *) 0 ; double result; arg1 = (ZenGnssData *)jarg1; 
  result = (double) ((arg1)->velocityAccuracy); jresult = result;  return jresult; }
SWIGEXPORT void SWIGSTDCALL CSharp_ZenGnssData_fixType_set(void * jarg1, int jarg2) { ZenGnssData *arg1 = (ZenGnssData *) 0 ;
  ZenGnssFixType arg2 ; arg1 = (ZenGnssData *)jarg1;  arg2 = (ZenGnssFixType)jarg2;  if (arg1) (arg1)->fixType = arg2; }
SWIGEXPORT int SWIGSTDCALL CSharp_ZenGnssData_fixType_get(void * jarg1) { int jresult ; ZenGnssData *arg1 = (ZenGnssData *) 0 ;
  ZenGnssFixType result; arg1 = (ZenGnssData *)jarg1;  result = (ZenGnssFixType) ((arg1)->fixType); jresult = (int)result; 
  return jresult; }
SWIGEXPORT void SWIGSTDCALL CSharp_ZenGnssData_carrierPhaseSolution_set(void * jarg1, int jarg2) {
  ZenGnssData *arg1 = (ZenGnssData *) 0 ; ZenGnssFixCarrierPhaseSolution arg2 ; arg1 = (ZenGnssData *)jarg1; 
  arg2 = (ZenGnssFixCarrierPhaseSolution)jarg2;  if (arg1) (arg1)->carrierPhaseSolution = arg2; }
SWIGEXPORT int SWIGSTDCALL CSharp_ZenGnssData_carrierPhaseSolution_get(void * jarg1) { int jresult ;
  ZenGnssData *arg1 = (ZenGnssData *) 0 ; ZenGnssFixCarrierPhaseSolution result; arg1 = (ZenGnssData *)jarg1; 
  result = (ZenGnssFixCarrierPhaseSolution) ((arg1)->carrierPhaseSolution); jresult = (int)result;  return jresult; }
SWIGEXPORT void SWIGSTDCALL CSharp_ZenGnssData_numberSatellitesUsed_set(void * jarg1, unsigned char jarg2) {
  ZenGnssData *arg1 = (ZenGnssData *) 0 ; uint8_t arg2 ; arg1 = (ZenGnssData *)jarg1;  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->numberSatellitesUsed = arg2; }
SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ZenGnssData_numberSatellitesUsed_get(void * jarg1) { unsigned char jresult ;
  ZenGnssData *arg1 = (ZenGnssData *) 0 ; uint8_t result; arg1 = (ZenGnssData *)jarg1; 
  result = (uint8_t) ((arg1)->numberSatellitesUsed); jresult = result;  return jresult; }
SWIGEXPORT void SWIGSTDCALL CSharp_ZenGnssData_year_set(void * jarg1, unsigned short jarg2) {
  ZenGnssData *arg1 = (ZenGnssData *) 0 ; uint16_t arg2 ; arg1 = (ZenGnssData *)jarg1;  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->year = arg2; }
SWIGEXPORT unsigned short SWIGSTDCALL CSharp_ZenGnssData_year_get(void * jarg1) { unsigned short jresult ;
  ZenGnssData *arg1 = (ZenGnssData *) 0 ; uint16_t result; arg1 = (ZenGnssData *)jarg1;  result = (uint16_t) ((arg1)->year);
  jresult = result;  return jresult; }
SWIGEXPORT void SWIGSTDCALL CSharp_ZenGnssData_month_set(void * jarg1, unsigned char jarg2) {
  ZenGnssData *arg1 = (ZenGnssData *) 0 ; uint8_t arg2 ; arg1 = (ZenGnssData *)jarg1;  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->month = arg2; }
SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ZenGnssData_month_get(void * jarg1) { unsigned char jresult ;
  ZenGnssData *arg1 = (ZenGnssData *) 0 ; uint8_t result; arg1 = (ZenGnssData *)jarg1;  result = (uint8_t) ((arg1)->month);
  jresult = result;  return jresult; }
SWIGEXPORT void SWIGSTDCALL CSharp_ZenGnssData_day_set(void * jarg1, unsigned char jarg2) {
  ZenGnssData *arg1 = (ZenGnssData *) 0 ; uint8_t arg2 ; arg1 = (ZenGnssData *)jarg1;  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->day = arg2; }
SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ZenGnssData_day_get(void * jarg1) { unsigned char jresult ;
  ZenGnssData *arg1 = (ZenGnssData *) 0 ; uint8_t result; arg1 = (ZenGnssData *)jarg1;  result = (uint8_t) ((arg1)->day);
  jresult = result;  return jresult; }
SWIGEXPORT void SWIGSTDCALL CSharp_ZenGnssData_hour_set(void * jarg1, unsigned char jarg2) {
  ZenGnssData *arg1 = (ZenGnssData *) 0 ; uint8_t arg2 ; arg1 = (ZenGnssData *)jarg1;  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->hour = arg2; }
SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ZenGnssData_hour_get(void * jarg1) { unsigned char jresult ;
  ZenGnssData *arg1 = (ZenGnssData *) 0 ; uint8_t result; arg1 = (ZenGnssData *)jarg1;  result = (uint8_t) ((arg1)->hour);
  jresult = result;  return jresult; }
SWIGEXPORT void SWIGSTDCALL CSharp_ZenGnssData_minute_set(void * jarg1, unsigned char jarg2) {
  ZenGnssData *arg1 = (ZenGnssData *) 0 ; uint8_t arg2 ; arg1 = (ZenGnssData *)jarg1;  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->minute = arg2; }
SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ZenGnssData_minute_get(void * jarg1) { unsigned char jresult ;
  ZenGnssData *arg1 = (ZenGnssData *) 0 ; uint8_t result; arg1 = (ZenGnssData *)jarg1;  result = (uint8_t) ((arg1)->minute);
  jresult = result;  return jresult; }
SWIGEXPORT void SWIGSTDCALL CSharp_ZenGnssData_second_set(void * jarg1, unsigned char jarg2) {
  ZenGnssData *arg1 = (ZenGnssData *) 0 ; uint8_t arg2 ; arg1 = (ZenGnssData *)jarg1;  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->second = arg2; }
SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ZenGnssData_second_get(void * jarg1) { unsigned char jresult ;
  ZenGnssData *arg1 = (ZenGnssData *) 0 ; uint8_t result; arg1 = (ZenGnssData *)jarg1;  result = (uint8_t) ((arg1)->second);
  jresult = result;  return jresult; }
SWIGEXPORT void SWIGSTDCALL CSharp_ZenGnssData_nanoSecondCorrection_set(void * jarg1, int jarg2) {
  ZenGnssData *arg1 = (ZenGnssData *) 0 ; int32_t arg2 ; arg1 = (ZenGnssData *)jarg1;  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->nanoSecondCorrection = arg2; }
SWIGEXPORT int SWIGSTDCALL CSharp_ZenGnssData_nanoSecondCorrection_get(void * jarg1) { int jresult ;
  ZenGnssData *arg1 = (ZenGnssData *) 0 ; int32_t result; arg1 = (ZenGnssData *)jarg1; 
  result = (int32_t) ((arg1)->nanoSecondCorrection); jresult = result;  return jresult; }
SWIGEXPORT void * SWIGSTDCALL CSharp_new_ZenGnssData() { void * jresult ; ZenGnssData *result = 0 ;
  result = (ZenGnssData *)new ZenGnssData(); jresult = (void *)result;  return jresult; }
SWIGEXPORT void SWIGSTDCALL CSharp_delete_ZenGnssData(void * jarg1) { ZenGnssData *arg1 = (ZenGnssData *) 0 ;
  arg1 = (ZenGnssData *)jarg1;  delete arg1; }
SWIGEXPORT void SWIGSTDCALL CSharp_ZenSensorDesc_name_set(void * jarg1, char * jarg2) {
  ZenSensorDesc *arg1 = (ZenSensorDesc *) 0 ; char *arg2 ; arg1 = (ZenSensorDesc *)jarg1;  arg2 = (char *)jarg2;  { if(arg2) {
      strncpy((char*)arg1->name, (const char *)arg2, 256-1); arg1->name[256-1] = 0; }  else { arg1->name[0] = 0; }  }  }
SWIGEXPORT char * SWIGSTDCALL CSharp_ZenSensorDesc_name_get(void * jarg1) { char * jresult ;
  ZenSensorDesc *arg1 = (ZenSensorDesc *) 0 ; char *result = 0 ; arg1 = (ZenSensorDesc *)jarg1; 
  result = (char *)(char *) ((arg1)->name); jresult = SWIG_csharp_string_callback((const char *)result);  return jresult; }
SWIGEXPORT void SWIGSTDCALL CSharp_ZenSensorDesc_serialNumber_set(void * jarg1, char * jarg2) {
  ZenSensorDesc *arg1 = (ZenSensorDesc *) 0 ; char *arg2 ; arg1 = (ZenSensorDesc *)jarg1;  arg2 = (char *)jarg2;  { if(arg2) {
      strncpy((char*)arg1->serialNumber, (const char *)arg2, 64-1); arg1->serialNumber[64-1] = 0; }  else {
      arg1->serialNumber[0] = 0; }  }  }
SWIGEXPORT char * SWIGSTDCALL CSharp_ZenSensorDesc_serialNumber_get(void * jarg1) { char * jresult ;
  ZenSensorDesc *arg1 = (ZenSensorDesc *) 0 ; char *result = 0 ; arg1 = (ZenSensorDesc *)jarg1; 
  result = (char *)(char *) ((arg1)->serialNumber); jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult; }
SWIGEXPORT void SWIGSTDCALL CSharp_ZenSensorDesc_ioType_set(void * jarg1, char * jarg2) {
  ZenSensorDesc *arg1 = (ZenSensorDesc *) 0 ; char *arg2 ; arg1 = (ZenSensorDesc *)jarg1;  arg2 = (char *)jarg2;  { if(arg2) {
      strncpy((char*)arg1->ioType, (const char *)arg2, 64-1); arg1->ioType[64-1] = 0; }  else { arg1->ioType[0] = 0; }  }  }
SWIGEXPORT char * SWIGSTDCALL CSharp_ZenSensorDesc_ioType_get(void * jarg1) { char * jresult ;
  ZenSensorDesc *arg1 = (ZenSensorDesc *) 0 ; char *result = 0 ; arg1 = (ZenSensorDesc *)jarg1; 
  result = (char *)(char *) ((arg1)->ioType); jresult = SWIG_csharp_string_callback((const char *)result);  return jresult; }
SWIGEXPORT void SWIGSTDCALL CSharp_ZenSensorDesc_identifier_set(void * jarg1, char * jarg2) {
  ZenSensorDesc *arg1 = (ZenSensorDesc *) 0 ; char *arg2 ; arg1 = (ZenSensorDesc *)jarg1;  arg2 = (char *)jarg2;  { if(arg2) {
      strncpy((char*)arg1->identifier, (const char *)arg2, 64-1); arg1->identifier[64-1] = 0; }  else {
      arg1->identifier[0] = 0; }  }  }
SWIGEXPORT char * SWIGSTDCALL CSharp_ZenSensorDesc_identifier_get(void * jarg1) { char * jresult ;
  ZenSensorDesc *arg1 = (ZenSensorDesc *) 0 ; char *result = 0 ; arg1 = (ZenSensorDesc *)jarg1; 
  result = (char *)(char *) ((arg1)->identifier); jresult = SWIG_csharp_string_callback((const char *)result);  return jresult; }
SWIGEXPORT void SWIGSTDCALL CSharp_ZenSensorDesc_baudRate_set(void * jarg1, unsigned int jarg2) {
  ZenSensorDesc *arg1 = (ZenSensorDesc *) 0 ; uint32_t arg2 ; arg1 = (ZenSensorDesc *)jarg1;  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->baudRate = arg2; }
SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZenSensorDesc_baudRate_get(void * jarg1) { unsigned int jresult ;
  ZenSensorDesc *arg1 = (ZenSensorDesc *) 0 ; uint32_t result; arg1 = (ZenSensorDesc *)jarg1; 
  result = (uint32_t) ((arg1)->baudRate); jresult = result;  return jresult; }
SWIGEXPORT void * SWIGSTDCALL CSharp_new_ZenSensorDesc() { void * jresult ; ZenSensorDesc *result = 0 ;
  result = (ZenSensorDesc *)new ZenSensorDesc(); jresult = (void *)result;  return jresult; }
SWIGEXPORT void SWIGSTDCALL CSharp_delete_ZenSensorDesc(void * jarg1) { ZenSensorDesc *arg1 = (ZenSensorDesc *) 0 ;
  arg1 = (ZenSensorDesc *)jarg1;  delete arg1; }
SWIGEXPORT void SWIGSTDCALL CSharp_ZenEventData_SensorDisconnected_error_set(void * jarg1, int jarg2) {
  ZenEventData_SensorDisconnected *arg1 = (ZenEventData_SensorDisconnected *) 0 ; ZenError_t arg2 ;
  arg1 = (ZenEventData_SensorDisconnected *)jarg1;  arg2 = (ZenError_t)jarg2;  if (arg1) (arg1)->error = arg2; }
SWIGEXPORT int SWIGSTDCALL CSharp_ZenEventData_SensorDisconnected_error_get(void * jarg1) { int jresult ;
  ZenEventData_SensorDisconnected *arg1 = (ZenEventData_SensorDisconnected *) 0 ; ZenError_t result;
  arg1 = (ZenEventData_SensorDisconnected *)jarg1;  result = (ZenError_t) ((arg1)->error); jresult = result;  return jresult; }
SWIGEXPORT void * SWIGSTDCALL CSharp_new_ZenEventData_SensorDisconnected() { void * jresult ;
  ZenEventData_SensorDisconnected *result = 0 ;
  result = (ZenEventData_SensorDisconnected *)new ZenEventData_SensorDisconnected(); jresult = (void *)result;  return jresult; }
SWIGEXPORT void SWIGSTDCALL CSharp_delete_ZenEventData_SensorDisconnected(void * jarg1) {
  ZenEventData_SensorDisconnected *arg1 = (ZenEventData_SensorDisconnected *) 0 ;
  arg1 = (ZenEventData_SensorDisconnected *)jarg1;  delete arg1; }
SWIGEXPORT void SWIGSTDCALL CSharp_ZenEventData_SensorListingProgress_progress_set(void * jarg1, float jarg2) {
  ZenEventData_SensorListingProgress *arg1 = (ZenEventData_SensorListingProgress *) 0 ; float arg2 ;
  arg1 = (ZenEventData_SensorListingProgress *)jarg1;  arg2 = (float)jarg2;  if (arg1) (arg1)->progress = arg2; }
SWIGEXPORT float SWIGSTDCALL CSharp_ZenEventData_SensorListingProgress_progress_get(void * jarg1) { float jresult ;
  ZenEventData_SensorListingProgress *arg1 = (ZenEventData_SensorListingProgress *) 0 ; float result;
  arg1 = (ZenEventData_SensorListingProgress *)jarg1;  result = (float) ((arg1)->progress); jresult = result;  return jresult; }
SWIGEXPORT void SWIGSTDCALL CSharp_ZenEventData_SensorListingProgress_complete_set(void * jarg1, char jarg2) {
  ZenEventData_SensorListingProgress *arg1 = (ZenEventData_SensorListingProgress *) 0 ; char arg2 ;
  arg1 = (ZenEventData_SensorListingProgress *)jarg1;  arg2 = (char)jarg2;  if (arg1) (arg1)->complete = arg2; }
SWIGEXPORT char SWIGSTDCALL CSharp_ZenEventData_SensorListingProgress_complete_get(void * jarg1) { char jresult ;
  ZenEventData_SensorListingProgress *arg1 = (ZenEventData_SensorListingProgress *) 0 ; char result;
  arg1 = (ZenEventData_SensorListingProgress *)jarg1;  result = (char) ((arg1)->complete); jresult = result;  return jresult; }
SWIGEXPORT void * SWIGSTDCALL CSharp_new_ZenEventData_SensorListingProgress() { void * jresult ;
  ZenEventData_SensorListingProgress *result = 0 ;
  result = (ZenEventData_SensorListingProgress *)new ZenEventData_SensorListingProgress(); jresult = (void *)result; 
  return jresult; }
SWIGEXPORT void SWIGSTDCALL CSharp_delete_ZenEventData_SensorListingProgress(void * jarg1) {
  ZenEventData_SensorListingProgress *arg1 = (ZenEventData_SensorListingProgress *) 0 ;
  arg1 = (ZenEventData_SensorListingProgress *)jarg1;  delete arg1; }
SWIGEXPORT void SWIGSTDCALL CSharp_ZenEventData_imuData_set(void * jarg1, void * jarg2) {
  ZenEventData *arg1 = (ZenEventData *) 0 ; ZenEventData_Imu *arg2 = (ZenEventData_Imu *) 0 ; arg1 = (ZenEventData *)jarg1; 
  arg2 = (ZenEventData_Imu *)jarg2;  if (arg1) (arg1)->imuData = *arg2; }
SWIGEXPORT void * SWIGSTDCALL CSharp_ZenEventData_imuData_get(void * jarg1) { void * jresult ;
  ZenEventData *arg1 = (ZenEventData *) 0 ; ZenEventData_Imu *result = 0 ; arg1 = (ZenEventData *)jarg1; 
  result = (ZenEventData_Imu *)& ((arg1)->imuData); jresult = (void *)result;  return jresult; }
SWIGEXPORT void SWIGSTDCALL CSharp_ZenEventData_gnssData_set(void * jarg1, void * jarg2) {
  ZenEventData *arg1 = (ZenEventData *) 0 ; ZenEventData_Gnss *arg2 = (ZenEventData_Gnss *) 0 ; arg1 = (ZenEventData *)jarg1; 
  arg2 = (ZenEventData_Gnss *)jarg2;  if (arg1) (arg1)->gnssData = *arg2; }
SWIGEXPORT void * SWIGSTDCALL CSharp_ZenEventData_gnssData_get(void * jarg1) { void * jresult ;
  ZenEventData *arg1 = (ZenEventData *) 0 ; ZenEventData_Gnss *result = 0 ; arg1 = (ZenEventData *)jarg1; 
  result = (ZenEventData_Gnss *)& ((arg1)->gnssData); jresult = (void *)result;  return jresult; }
SWIGEXPORT void SWIGSTDCALL CSharp_ZenEventData_sensorDisconnected_set(void * jarg1, void * jarg2) {
  ZenEventData *arg1 = (ZenEventData *) 0 ; ZenEventData_SensorDisconnected *arg2 = (ZenEventData_SensorDisconnected *) 0 ;
  arg1 = (ZenEventData *)jarg1;  arg2 = (ZenEventData_SensorDisconnected *)jarg2; 
  if (arg1) (arg1)->sensorDisconnected = *arg2; }
SWIGEXPORT void * SWIGSTDCALL CSharp_ZenEventData_sensorDisconnected_get(void * jarg1) { void * jresult ;
  ZenEventData *arg1 = (ZenEventData *) 0 ; ZenEventData_SensorDisconnected *result = 0 ; arg1 = (ZenEventData *)jarg1; 
  result = (ZenEventData_SensorDisconnected *)& ((arg1)->sensorDisconnected); jresult = (void *)result;  return jresult; }
SWIGEXPORT void SWIGSTDCALL CSharp_ZenEventData_sensorFound_set(void * jarg1, void * jarg2) {
  ZenEventData *arg1 = (ZenEventData *) 0 ; ZenEventData_SensorFound *arg2 = (ZenEventData_SensorFound *) 0 ;
  arg1 = (ZenEventData *)jarg1;  arg2 = (ZenEventData_SensorFound *)jarg2;  if (arg1) (arg1)->sensorFound = *arg2; }
SWIGEXPORT void * SWIGSTDCALL CSharp_ZenEventData_sensorFound_get(void * jarg1) { void * jresult ;
  ZenEventData *arg1 = (ZenEventData *) 0 ; ZenEventData_SensorFound *result = 0 ; arg1 = (ZenEventData *)jarg1; 
  result = (ZenEventData_SensorFound *)& ((arg1)->sensorFound); jresult = (void *)result;  return jresult; }
SWIGEXPORT void SWIGSTDCALL CSharp_ZenEventData_sensorListingProgress_set(void * jarg1, void * jarg2) {
  ZenEventData *arg1 = (ZenEventData *) 0 ;
  ZenEventData_SensorListingProgress *arg2 = (ZenEventData_SensorListingProgress *) 0 ; arg1 = (ZenEventData *)jarg1; 
  arg2 = (ZenEventData_SensorListingProgress *)jarg2;  if (arg1) (arg1)->sensorListingProgress = *arg2; }
SWIGEXPORT void * SWIGSTDCALL CSharp_ZenEventData_sensorListingProgress_get(void * jarg1) { void * jresult ;
  ZenEventData *arg1 = (ZenEventData *) 0 ; ZenEventData_SensorListingProgress *result = 0 ; arg1 = (ZenEventData *)jarg1; 
  result = (ZenEventData_SensorListingProgress *)& ((arg1)->sensorListingProgress); jresult = (void *)result;  return jresult; }
SWIGEXPORT void * SWIGSTDCALL CSharp_new_ZenEventData() { void * jresult ; ZenEventData *result = 0 ;
  result = (ZenEventData *)new ZenEventData(); jresult = (void *)result;  return jresult; }
SWIGEXPORT void SWIGSTDCALL CSharp_delete_ZenEventData(void * jarg1) { ZenEventData *arg1 = (ZenEventData *) 0 ;
  arg1 = (ZenEventData *)jarg1;  delete arg1; }
SWIGEXPORT void SWIGSTDCALL CSharp_ZenEvent_eventType_set(void * jarg1, int jarg2) { ZenEvent *arg1 = (ZenEvent *) 0 ;
  ZenEvent_t arg2 ; arg1 = (ZenEvent *)jarg1;  arg2 = (ZenEvent_t)jarg2;  if (arg1) (arg1)->eventType = arg2; }
SWIGEXPORT int SWIGSTDCALL CSharp_ZenEvent_eventType_get(void * jarg1) { int jresult ; ZenEvent *arg1 = (ZenEvent *) 0 ;
  ZenEvent_t result; arg1 = (ZenEvent *)jarg1;  result = (ZenEvent_t) ((arg1)->eventType); jresult = result;  return jresult; }
SWIGEXPORT void SWIGSTDCALL CSharp_ZenEvent_sensor_set(void * jarg1, void * jarg2) { ZenEvent *arg1 = (ZenEvent *) 0 ;
  ZenSensorHandle_t *arg2 = (ZenSensorHandle_t *) 0 ; arg1 = (ZenEvent *)jarg1;  arg2 = (ZenSensorHandle_t *)jarg2; 
  if (arg1) (arg1)->sensor = *arg2; }
SWIGEXPORT void * SWIGSTDCALL CSharp_ZenEvent_sensor_get(void * jarg1) { void * jresult ; ZenEvent *arg1 = (ZenEvent *) 0 ;
  ZenSensorHandle_t *result = 0 ; arg1 = (ZenEvent *)jarg1;  result = (ZenSensorHandle_t *)& ((arg1)->sensor);
  jresult = (void *)result;  return jresult; }
SWIGEXPORT void SWIGSTDCALL CSharp_ZenEvent_component_set(void * jarg1, void * jarg2) { ZenEvent *arg1 = (ZenEvent *) 0 ;
  ZenComponentHandle_t *arg2 = (ZenComponentHandle_t *) 0 ; arg1 = (ZenEvent *)jarg1;  arg2 = (ZenComponentHandle_t *)jarg2; 
  if (arg1) (arg1)->component = *arg2; }
SWIGEXPORT void * SWIGSTDCALL CSharp_ZenEvent_component_get(void * jarg1) { void * jresult ; ZenEvent *arg1 = (ZenEvent *) 0 ;
  ZenComponentHandle_t *result = 0 ; arg1 = (ZenEvent *)jarg1;  result = (ZenComponentHandle_t *)& ((arg1)->component);
  jresult = (void *)result;  return jresult; }
SWIGEXPORT void SWIGSTDCALL CSharp_ZenEvent_data_set(void * jarg1, void * jarg2) { ZenEvent *arg1 = (ZenEvent *) 0 ;
  ZenEventData *arg2 = (ZenEventData *) 0 ; arg1 = (ZenEvent *)jarg1;  arg2 = (ZenEventData *)jarg2; 
  if (arg1) (arg1)->data = *arg2; }
SWIGEXPORT void * SWIGSTDCALL CSharp_ZenEvent_data_get(void * jarg1) { void * jresult ; ZenEvent *arg1 = (ZenEvent *) 0 ;
  ZenEventData *result = 0 ; arg1 = (ZenEvent *)jarg1;  result = (ZenEventData *)& ((arg1)->data); jresult = (void *)result; 
  return jresult; }
SWIGEXPORT void * SWIGSTDCALL CSharp_new_ZenEvent() { void * jresult ; ZenEvent *result = 0 ;
  result = (ZenEvent *)new ZenEvent(); jresult = (void *)result;  return jresult; }
SWIGEXPORT void SWIGSTDCALL CSharp_delete_ZenEvent(void * jarg1) { ZenEvent *arg1 = (ZenEvent *) 0 ; arg1 = (ZenEvent *)jarg1; 
  delete arg1; }
SWIGEXPORT char * SWIGSTDCALL CSharp_g_zenSensorType_Imu_get() { char * jresult ; char *result = 0 ;
  result = (char *)(char *)g_zenSensorType_Imu; jresult = SWIG_csharp_string_callback((const char *)result);  return jresult; }
SWIGEXPORT char * SWIGSTDCALL CSharp_g_zenSensorType_Gnss_get() { char * jresult ; char *result = 0 ;
  result = (char *)(char *)g_zenSensorType_Gnss; jresult = SWIG_csharp_string_callback((const char *)result);  return jresult; }
SWIGEXPORT int SWIGSTDCALL CSharp_ZenInit(void * jarg1) { int jresult ; ZenClientHandle_t *arg1 = (ZenClientHandle_t *) 0 ;
  ZenError result; arg1 = (ZenClientHandle_t *)jarg1;  result = (ZenError)ZenInit(arg1); jresult = (int)result; 
  return jresult; }
SWIGEXPORT int SWIGSTDCALL CSharp_ZenShutdown(void * jarg1) { int jresult ; ZenClientHandle_t arg1 ; ZenClientHandle_t *argp1 ;
  ZenError result; argp1 = (ZenClientHandle_t *)jarg1;  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenClientHandle_t", 0);
    return 0; }  arg1 = *argp1;  result = (ZenError)ZenShutdown(arg1); jresult = (int)result;  return jresult; }
SWIGEXPORT int SWIGSTDCALL CSharp_ZenSetLogLevel(int jarg1) { int jresult ; ZenLogLevel arg1 ; ZenError result;
  arg1 = (ZenLogLevel)jarg1;  result = (ZenError)ZenSetLogLevel(arg1); jresult = (int)result;  return jresult; }
SWIGEXPORT int SWIGSTDCALL CSharp_ZenListSensorsAsync(void * jarg1) { int jresult ; ZenClientHandle_t arg1 ;
  ZenClientHandle_t *argp1 ; ZenError result; argp1 = (ZenClientHandle_t *)jarg1;  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenClientHandle_t", 0);
    return 0; }  arg1 = *argp1;  result = (ZenError)ZenListSensorsAsync(arg1); jresult = (int)result;  return jresult; }
SWIGEXPORT int SWIGSTDCALL CSharp_ZenObtainSensor(void * jarg1, void * jarg2, void * jarg3) { int jresult ;
  ZenClientHandle_t arg1 ; ZenSensorDesc *arg2 = (ZenSensorDesc *) (ZenSensorDesc *)0 ;
  ZenSensorHandle_t *arg3 = (ZenSensorHandle_t *) 0 ; ZenClientHandle_t *argp1 ; ZenSensorInitError result;
  argp1 = (ZenClientHandle_t *)jarg1;  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenClientHandle_t", 0);
    return 0; }  arg1 = *argp1;  arg2 = (ZenSensorDesc *)jarg2;  arg3 = (ZenSensorHandle_t *)jarg3; 
  result = (ZenSensorInitError)ZenObtainSensor(arg1,(ZenSensorDesc const *)arg2,arg3); jresult = (int)result;  return jresult; }
SWIGEXPORT int SWIGSTDCALL CSharp_ZenObtainSensorByName(void * jarg1, char * jarg2, char * jarg3, unsigned int jarg4, void * jarg5) {
  int jresult ; ZenClientHandle_t arg1 ; char *arg2 = (char *) 0 ; char *arg3 = (char *) 0 ; uint32_t arg4 ;
  ZenSensorHandle_t *arg5 = (ZenSensorHandle_t *) 0 ; ZenClientHandle_t *argp1 ; ZenSensorInitError result;
  argp1 = (ZenClientHandle_t *)jarg1;  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenClientHandle_t", 0);
    return 0; }  arg1 = *argp1;  arg2 = (char *)jarg2;  arg3 = (char *)jarg3;  arg4 = (uint32_t)jarg4; 
  arg5 = (ZenSensorHandle_t *)jarg5; 
  result = (ZenSensorInitError)ZenObtainSensorByName(arg1,(char const *)arg2,(char const *)arg3,arg4,arg5);
  jresult = (int)result;  return jresult; }
SWIGEXPORT int SWIGSTDCALL CSharp_ZenReleaseSensor(void * jarg1, void * jarg2) { int jresult ; ZenClientHandle_t arg1 ;
  ZenSensorHandle_t arg2 ; ZenClientHandle_t *argp1 ; ZenSensorHandle_t *argp2 ; ZenError result;
  argp1 = (ZenClientHandle_t *)jarg1;  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenClientHandle_t", 0);
    return 0; }  arg1 = *argp1;  argp2 = (ZenSensorHandle_t *)jarg2;  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenSensorHandle_t", 0);
    return 0; }  arg2 = *argp2;  result = (ZenError)ZenReleaseSensor(arg1,arg2); jresult = (int)result;  return jresult; }
SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZenPollNextEvent(void * jarg1, void * jarg2) { unsigned int jresult ;
  ZenClientHandle_t arg1 ; ZenEvent *arg2 = (ZenEvent *) (ZenEvent *)0 ; ZenClientHandle_t *argp1 ; bool result;
  argp1 = (ZenClientHandle_t *)jarg1;  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenClientHandle_t", 0);
    return 0; }  arg1 = *argp1;  arg2 = (ZenEvent *)jarg2;  result = (bool)ZenPollNextEvent(arg1,arg2); jresult = result; 
  return jresult; }
SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZenWaitForNextEvent(void * jarg1, void * jarg2) { unsigned int jresult ;
  ZenClientHandle_t arg1 ; ZenEvent *arg2 = (ZenEvent *) (ZenEvent *)0 ; ZenClientHandle_t *argp1 ; bool result;
  argp1 = (ZenClientHandle_t *)jarg1;  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenClientHandle_t", 0);
    return 0; }  arg1 = *argp1;  arg2 = (ZenEvent *)jarg2;  result = (bool)ZenWaitForNextEvent(arg1,arg2); jresult = result; 
  return jresult; }
SWIGEXPORT int SWIGSTDCALL CSharp_ZenPublishEvents(void * jarg1, void * jarg2, char * jarg3) { int jresult ;
  ZenClientHandle_t arg1 ; ZenSensorHandle_t arg2 ; char *arg3 = (char *) 0 ; ZenClientHandle_t *argp1 ;
  ZenSensorHandle_t *argp2 ; ZenError result; argp1 = (ZenClientHandle_t *)jarg1;  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenClientHandle_t", 0);
    return 0; }  arg1 = *argp1;  argp2 = (ZenSensorHandle_t *)jarg2;  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenSensorHandle_t", 0);
    return 0; }  arg2 = *argp2;  arg3 = (char *)jarg3;  result = (ZenError)ZenPublishEvents(arg1,arg2,(char const *)arg3);
  jresult = (int)result;  return jresult; }
SWIGEXPORT int SWIGSTDCALL CSharp_ZenSensorComponents(void * jarg1, void * jarg2, char * jarg3, void * jarg4, void * jarg5) {
  int jresult ; ZenClientHandle_t arg1 ; ZenSensorHandle_t arg2 ; char *arg3 = (char *) (char *)0 ;
  ZenComponentHandle_t **arg4 = (ZenComponentHandle_t **) 0 ; size_t *arg5 = (size_t *) (size_t *)0 ; ZenClientHandle_t *argp1 ;
  ZenSensorHandle_t *argp2 ; ZenError result; argp1 = (ZenClientHandle_t *)jarg1;  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenClientHandle_t", 0);
    return 0; }  arg1 = *argp1;  argp2 = (ZenSensorHandle_t *)jarg2;  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenSensorHandle_t", 0);
    return 0; }  arg2 = *argp2;  arg3 = (char *)jarg3;  arg4 = (ZenComponentHandle_t **)jarg4;  arg5 = (size_t *)jarg5; 
  result = (ZenError)ZenSensorComponents(arg1,arg2,(char const *)arg3,arg4,arg5); jresult = (int)result;  return jresult; }
SWIGEXPORT int SWIGSTDCALL CSharp_ZenSensorComponentsByNumber(void * jarg1, void * jarg2, char * jarg3, unsigned long jarg4, void * jarg5) {
  int jresult ; ZenClientHandle_t arg1 ; ZenSensorHandle_t arg2 ; char *arg3 = (char *) (char *)0 ; size_t arg4 ;
  ZenComponentHandle_t *arg5 = (ZenComponentHandle_t *) 0 ; ZenClientHandle_t *argp1 ; ZenSensorHandle_t *argp2 ;
  ZenError result; argp1 = (ZenClientHandle_t *)jarg1;  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenClientHandle_t", 0);
    return 0; }  arg1 = *argp1;  argp2 = (ZenSensorHandle_t *)jarg2;  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenSensorHandle_t", 0);
    return 0; }  arg2 = *argp2;  arg3 = (char *)jarg3;  arg4 = (size_t)jarg4;  arg5 = (ZenComponentHandle_t *)jarg5; 
  result = (ZenError)ZenSensorComponentsByNumber(arg1,arg2,(char const *)arg3,arg4,arg5); jresult = (int)result; 
  return jresult; }
SWIGEXPORT char * SWIGSTDCALL CSharp_ZenSensorIoType(void * jarg1, void * jarg2) { char * jresult ; ZenClientHandle_t arg1 ;
  ZenSensorHandle_t arg2 ; ZenClientHandle_t *argp1 ; ZenSensorHandle_t *argp2 ; char *result = 0 ;
  argp1 = (ZenClientHandle_t *)jarg1;  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenClientHandle_t", 0);
    return 0; }  arg1 = *argp1;  argp2 = (ZenSensorHandle_t *)jarg2;  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenSensorHandle_t", 0);
    return 0; }  arg2 = *argp2;  result = (char *)ZenSensorIoType(arg1,arg2);
  jresult = SWIG_csharp_string_callback((const char *)result);  return jresult; }
SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZenSensorEquals(void * jarg1, void * jarg2, void * jarg3) { unsigned int jresult ;
  ZenClientHandle_t arg1 ; ZenSensorHandle_t arg2 ; ZenSensorDesc *arg3 = (ZenSensorDesc *) (ZenSensorDesc *)0 ;
  ZenClientHandle_t *argp1 ; ZenSensorHandle_t *argp2 ; bool result; argp1 = (ZenClientHandle_t *)jarg1;  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenClientHandle_t", 0);
    return 0; }  arg1 = *argp1;  argp2 = (ZenSensorHandle_t *)jarg2;  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenSensorHandle_t", 0);
    return 0; }  arg2 = *argp2;  arg3 = (ZenSensorDesc *)jarg3; 
  result = (bool)ZenSensorEquals(arg1,arg2,(ZenSensorDesc const *)arg3); jresult = result;  return jresult; }
SWIGEXPORT int SWIGSTDCALL CSharp_ZenSensorUpdateFirmwareAsync(void * jarg1, void * jarg2, void * jarg3, unsigned long jarg4) {
  int jresult ; ZenClientHandle_t arg1 ; ZenSensorHandle_t arg2 ; unsigned char *arg3 = (unsigned char *) (unsigned char *)0 ;
  size_t arg4 ; ZenClientHandle_t *argp1 ; ZenSensorHandle_t *argp2 ; ZenAsyncStatus result;
  argp1 = (ZenClientHandle_t *)jarg1;  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenClientHandle_t", 0);
    return 0; }  arg1 = *argp1;  argp2 = (ZenSensorHandle_t *)jarg2;  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenSensorHandle_t", 0);
    return 0; }  arg2 = *argp2;  arg3 = (unsigned char *)jarg3;  arg4 = (size_t)jarg4; 
  result = (ZenAsyncStatus)ZenSensorUpdateFirmwareAsync(arg1,arg2,(unsigned char const *)arg3,arg4); jresult = (int)result; 
  return jresult; }
SWIGEXPORT int SWIGSTDCALL CSharp_ZenSensorUpdateIAPAsync(void * jarg1, void * jarg2, void * jarg3, unsigned long jarg4) {
  int jresult ; ZenClientHandle_t arg1 ; ZenSensorHandle_t arg2 ; unsigned char *arg3 = (unsigned char *) (unsigned char *)0 ;
  size_t arg4 ; ZenClientHandle_t *argp1 ; ZenSensorHandle_t *argp2 ; ZenAsyncStatus result;
  argp1 = (ZenClientHandle_t *)jarg1;  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenClientHandle_t", 0);
    return 0; }  arg1 = *argp1;  argp2 = (ZenSensorHandle_t *)jarg2;  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenSensorHandle_t", 0);
    return 0; }  arg2 = *argp2;  arg3 = (unsigned char *)jarg3;  arg4 = (size_t)jarg4; 
  result = (ZenAsyncStatus)ZenSensorUpdateIAPAsync(arg1,arg2,(unsigned char const *)arg3,arg4); jresult = (int)result; 
  return jresult; }
SWIGEXPORT int SWIGSTDCALL CSharp_ZenSensorExecuteProperty(void * jarg1, void * jarg2, int jarg3) { int jresult ;
  ZenClientHandle_t arg1 ; ZenSensorHandle_t arg2 ; ZenProperty_t arg3 ; ZenClientHandle_t *argp1 ; ZenSensorHandle_t *argp2 ;
  ZenError result; argp1 = (ZenClientHandle_t *)jarg1;  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenClientHandle_t", 0);
    return 0; }  arg1 = *argp1;  argp2 = (ZenSensorHandle_t *)jarg2;  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenSensorHandle_t", 0);
    return 0; }  arg2 = *argp2;  arg3 = (ZenProperty_t)jarg3;  result = (ZenError)ZenSensorExecuteProperty(arg1,arg2,arg3);
  jresult = (int)result;  return jresult; }
SWIGEXPORT int SWIGSTDCALL CSharp_ZenSensorGetArrayProperty(void * jarg1, void * jarg2, int jarg3, int jarg4, void * jarg5, void * jarg6) {
  int jresult ; ZenClientHandle_t arg1 ; ZenSensorHandle_t arg2 ; ZenProperty_t arg3 ; ZenPropertyType arg4 ;
  void *arg5 = (void *) (void *)0 ; size_t *arg6 = (size_t *) 0 ; ZenClientHandle_t *argp1 ; ZenSensorHandle_t *argp2 ;
  ZenError result; argp1 = (ZenClientHandle_t *)jarg1;  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenClientHandle_t", 0);
    return 0; }  arg1 = *argp1;  argp2 = (ZenSensorHandle_t *)jarg2;  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenSensorHandle_t", 0);
    return 0; }  arg2 = *argp2;  arg3 = (ZenProperty_t)jarg3;  arg4 = (ZenPropertyType)jarg4;  arg5 = (void *)jarg5; 
  arg6 = (size_t *)jarg6;  result = (ZenError)ZenSensorGetArrayProperty(arg1,arg2,arg3,arg4,arg5,arg6); jresult = (int)result; 
  return jresult; }
SWIGEXPORT int SWIGSTDCALL CSharp_ZenSensorGetBoolProperty(void * jarg1, void * jarg2, int jarg3, void * jarg4) { int jresult ;
  ZenClientHandle_t arg1 ; ZenSensorHandle_t arg2 ; ZenProperty_t arg3 ; bool *arg4 = (bool *) (bool *)0 ;
  ZenClientHandle_t *argp1 ; ZenSensorHandle_t *argp2 ; ZenError result; argp1 = (ZenClientHandle_t *)jarg1;  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenClientHandle_t", 0);
    return 0; }  arg1 = *argp1;  argp2 = (ZenSensorHandle_t *)jarg2;  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenSensorHandle_t", 0);
    return 0; }  arg2 = *argp2;  arg3 = (ZenProperty_t)jarg3;  arg4 = (bool *)jarg4; 
  result = (ZenError)ZenSensorGetBoolProperty(arg1,arg2,arg3,arg4); jresult = (int)result;  return jresult; }
SWIGEXPORT int SWIGSTDCALL CSharp_ZenSensorGetFloatProperty(void * jarg1, void * jarg2, int jarg3, void * jarg4) { int jresult ;
  ZenClientHandle_t arg1 ; ZenSensorHandle_t arg2 ; ZenProperty_t arg3 ; float *arg4 = (float *) (float *)0 ;
  ZenClientHandle_t *argp1 ; ZenSensorHandle_t *argp2 ; ZenError result; argp1 = (ZenClientHandle_t *)jarg1;  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenClientHandle_t", 0);
    return 0; }  arg1 = *argp1;  argp2 = (ZenSensorHandle_t *)jarg2;  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenSensorHandle_t", 0);
    return 0; }  arg2 = *argp2;  arg3 = (ZenProperty_t)jarg3;  arg4 = (float *)jarg4; 
  result = (ZenError)ZenSensorGetFloatProperty(arg1,arg2,arg3,arg4); jresult = (int)result;  return jresult; }
SWIGEXPORT int SWIGSTDCALL CSharp_ZenSensorGetInt32Property(void * jarg1, void * jarg2, int jarg3, void * jarg4) { int jresult ;
  ZenClientHandle_t arg1 ; ZenSensorHandle_t arg2 ; ZenProperty_t arg3 ; int32_t *arg4 = (int32_t *) (int32_t *)0 ;
  ZenClientHandle_t *argp1 ; ZenSensorHandle_t *argp2 ; ZenError result; argp1 = (ZenClientHandle_t *)jarg1;  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenClientHandle_t", 0);
    return 0; }  arg1 = *argp1;  argp2 = (ZenSensorHandle_t *)jarg2;  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenSensorHandle_t", 0);
    return 0; }  arg2 = *argp2;  arg3 = (ZenProperty_t)jarg3;  arg4 = (int32_t *)jarg4; 
  result = (ZenError)ZenSensorGetInt32Property(arg1,arg2,arg3,arg4); jresult = (int)result;  return jresult; }
SWIGEXPORT int SWIGSTDCALL CSharp_ZenSensorGetUInt64Property(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  int jresult ; ZenClientHandle_t arg1 ; ZenSensorHandle_t arg2 ; ZenProperty_t arg3 ;
  uint64_t *arg4 = (uint64_t *) (uint64_t *)0 ; ZenClientHandle_t *argp1 ; ZenSensorHandle_t *argp2 ; ZenError result;
  argp1 = (ZenClientHandle_t *)jarg1;  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenClientHandle_t", 0);
    return 0; }  arg1 = *argp1;  argp2 = (ZenSensorHandle_t *)jarg2;  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenSensorHandle_t", 0);
    return 0; }  arg2 = *argp2;  arg3 = (ZenProperty_t)jarg3;  arg4 = (uint64_t *)jarg4; 
  result = (ZenError)ZenSensorGetUInt64Property(arg1,arg2,arg3,arg4); jresult = (int)result;  return jresult; }
SWIGEXPORT int SWIGSTDCALL CSharp_ZenSensorSetArrayProperty(void * jarg1, void * jarg2, int jarg3, int jarg4, void * jarg5, unsigned long jarg6) {
  int jresult ; ZenClientHandle_t arg1 ; ZenSensorHandle_t arg2 ; ZenProperty_t arg3 ; ZenPropertyType arg4 ;
  void *arg5 = (void *) 0 ; size_t arg6 ; ZenClientHandle_t *argp1 ; ZenSensorHandle_t *argp2 ; ZenError result;
  argp1 = (ZenClientHandle_t *)jarg1;  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenClientHandle_t", 0);
    return 0; }  arg1 = *argp1;  argp2 = (ZenSensorHandle_t *)jarg2;  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenSensorHandle_t", 0);
    return 0; }  arg2 = *argp2;  arg3 = (ZenProperty_t)jarg3;  arg4 = (ZenPropertyType)jarg4;  arg5 = (void *)jarg5; 
  arg6 = (size_t)jarg6;  result = (ZenError)ZenSensorSetArrayProperty(arg1,arg2,arg3,arg4,(void const *)arg5,arg6);
  jresult = (int)result;  return jresult; }
SWIGEXPORT int SWIGSTDCALL CSharp_ZenSensorSetBoolProperty(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4) {
  int jresult ; ZenClientHandle_t arg1 ; ZenSensorHandle_t arg2 ; ZenProperty_t arg3 ; bool arg4 ; ZenClientHandle_t *argp1 ;
  ZenSensorHandle_t *argp2 ; ZenError result; argp1 = (ZenClientHandle_t *)jarg1;  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenClientHandle_t", 0);
    return 0; }  arg1 = *argp1;  argp2 = (ZenSensorHandle_t *)jarg2;  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenSensorHandle_t", 0);
    return 0; }  arg2 = *argp2;  arg3 = (ZenProperty_t)jarg3;  arg4 = jarg4 ? true : false; 
  result = (ZenError)ZenSensorSetBoolProperty(arg1,arg2,arg3,arg4); jresult = (int)result;  return jresult; }
SWIGEXPORT int SWIGSTDCALL CSharp_ZenSensorSetFloatProperty(void * jarg1, void * jarg2, int jarg3, float jarg4) { int jresult ;
  ZenClientHandle_t arg1 ; ZenSensorHandle_t arg2 ; ZenProperty_t arg3 ; float arg4 ; ZenClientHandle_t *argp1 ;
  ZenSensorHandle_t *argp2 ; ZenError result; argp1 = (ZenClientHandle_t *)jarg1;  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenClientHandle_t", 0);
    return 0; }  arg1 = *argp1;  argp2 = (ZenSensorHandle_t *)jarg2;  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenSensorHandle_t", 0);
    return 0; }  arg2 = *argp2;  arg3 = (ZenProperty_t)jarg3;  arg4 = (float)jarg4; 
  result = (ZenError)ZenSensorSetFloatProperty(arg1,arg2,arg3,arg4); jresult = (int)result;  return jresult; }
SWIGEXPORT int SWIGSTDCALL CSharp_ZenSensorSetInt32Property(void * jarg1, void * jarg2, int jarg3, int jarg4) { int jresult ;
  ZenClientHandle_t arg1 ; ZenSensorHandle_t arg2 ; ZenProperty_t arg3 ; int32_t arg4 ; ZenClientHandle_t *argp1 ;
  ZenSensorHandle_t *argp2 ; ZenError result; argp1 = (ZenClientHandle_t *)jarg1;  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenClientHandle_t", 0);
    return 0; }  arg1 = *argp1;  argp2 = (ZenSensorHandle_t *)jarg2;  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenSensorHandle_t", 0);
    return 0; }  arg2 = *argp2;  arg3 = (ZenProperty_t)jarg3;  arg4 = (int32_t)jarg4; 
  result = (ZenError)ZenSensorSetInt32Property(arg1,arg2,arg3,arg4); jresult = (int)result;  return jresult; }
SWIGEXPORT int SWIGSTDCALL CSharp_ZenSensorSetUInt64Property(void * jarg1, void * jarg2, int jarg3, unsigned long jarg4) {
  int jresult ; ZenClientHandle_t arg1 ; ZenSensorHandle_t arg2 ; ZenProperty_t arg3 ; uint64_t arg4 ;
  ZenClientHandle_t *argp1 ; ZenSensorHandle_t *argp2 ; ZenError result; argp1 = (ZenClientHandle_t *)jarg1;  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenClientHandle_t", 0);
    return 0; }  arg1 = *argp1;  argp2 = (ZenSensorHandle_t *)jarg2;  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenSensorHandle_t", 0);
    return 0; }  arg2 = *argp2;  arg3 = (ZenProperty_t)jarg3;  arg4 = (uint64_t)jarg4; 
  result = (ZenError)ZenSensorSetUInt64Property(arg1,arg2,arg3,arg4); jresult = (int)result;  return jresult; }
SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZenSensorIsArrayProperty(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ; ZenClientHandle_t arg1 ; ZenSensorHandle_t arg2 ; ZenProperty_t arg3 ; ZenClientHandle_t *argp1 ;
  ZenSensorHandle_t *argp2 ; bool result; argp1 = (ZenClientHandle_t *)jarg1;  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenClientHandle_t", 0);
    return 0; }  arg1 = *argp1;  argp2 = (ZenSensorHandle_t *)jarg2;  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenSensorHandle_t", 0);
    return 0; }  arg2 = *argp2;  arg3 = (ZenProperty_t)jarg3;  result = (bool)ZenSensorIsArrayProperty(arg1,arg2,arg3);
  jresult = result;  return jresult; }
SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZenSensorIsConstantProperty(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ; ZenClientHandle_t arg1 ; ZenSensorHandle_t arg2 ; ZenProperty_t arg3 ; ZenClientHandle_t *argp1 ;
  ZenSensorHandle_t *argp2 ; bool result; argp1 = (ZenClientHandle_t *)jarg1;  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenClientHandle_t", 0);
    return 0; }  arg1 = *argp1;  argp2 = (ZenSensorHandle_t *)jarg2;  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenSensorHandle_t", 0);
    return 0; }  arg2 = *argp2;  arg3 = (ZenProperty_t)jarg3;  result = (bool)ZenSensorIsConstantProperty(arg1,arg2,arg3);
  jresult = result;  return jresult; }
SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZenSensorIsExecutableProperty(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ; ZenClientHandle_t arg1 ; ZenSensorHandle_t arg2 ; ZenProperty_t arg3 ; ZenClientHandle_t *argp1 ;
  ZenSensorHandle_t *argp2 ; bool result; argp1 = (ZenClientHandle_t *)jarg1;  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenClientHandle_t", 0);
    return 0; }  arg1 = *argp1;  argp2 = (ZenSensorHandle_t *)jarg2;  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenSensorHandle_t", 0);
    return 0; }  arg2 = *argp2;  arg3 = (ZenProperty_t)jarg3;  result = (bool)ZenSensorIsExecutableProperty(arg1,arg2,arg3);
  jresult = result;  return jresult; }
SWIGEXPORT int SWIGSTDCALL CSharp_ZenSensorPropertyType(void * jarg1, void * jarg2, int jarg3) { int jresult ;
  ZenClientHandle_t arg1 ; ZenSensorHandle_t arg2 ; ZenProperty_t arg3 ; ZenClientHandle_t *argp1 ; ZenSensorHandle_t *argp2 ;
  ZenPropertyType result; argp1 = (ZenClientHandle_t *)jarg1;  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenClientHandle_t", 0);
    return 0; }  arg1 = *argp1;  argp2 = (ZenSensorHandle_t *)jarg2;  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenSensorHandle_t", 0);
    return 0; }  arg2 = *argp2;  arg3 = (ZenProperty_t)jarg3;  result = (ZenPropertyType)ZenSensorPropertyType(arg1,arg2,arg3);
  jresult = (int)result;  return jresult; }
SWIGEXPORT char * SWIGSTDCALL CSharp_ZenSensorComponentType(void * jarg1, void * jarg2, void * jarg3) { char * jresult ;
  ZenClientHandle_t arg1 ; ZenSensorHandle_t arg2 ; ZenComponentHandle_t arg3 ; ZenClientHandle_t *argp1 ;
  ZenSensorHandle_t *argp2 ; ZenComponentHandle_t *argp3 ; char *result = 0 ; argp1 = (ZenClientHandle_t *)jarg1;  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenClientHandle_t", 0);
    return 0; }  arg1 = *argp1;  argp2 = (ZenSensorHandle_t *)jarg2;  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenSensorHandle_t", 0);
    return 0; }  arg2 = *argp2;  argp3 = (ZenComponentHandle_t *)jarg3;  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenComponentHandle_t", 0);
    return 0; }  arg3 = *argp3;  result = (char *)ZenSensorComponentType(arg1,arg2,arg3);
  jresult = SWIG_csharp_string_callback((const char *)result);  return jresult; }
SWIGEXPORT int SWIGSTDCALL CSharp_ZenSensorComponentExecuteProperty(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  int jresult ; ZenClientHandle_t arg1 ; ZenSensorHandle_t arg2 ; ZenComponentHandle_t arg3 ; ZenProperty_t arg4 ;
  ZenClientHandle_t *argp1 ; ZenSensorHandle_t *argp2 ; ZenComponentHandle_t *argp3 ; ZenError result;
  argp1 = (ZenClientHandle_t *)jarg1;  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenClientHandle_t", 0);
    return 0; }  arg1 = *argp1;  argp2 = (ZenSensorHandle_t *)jarg2;  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenSensorHandle_t", 0);
    return 0; }  arg2 = *argp2;  argp3 = (ZenComponentHandle_t *)jarg3;  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenComponentHandle_t", 0);
    return 0; }  arg3 = *argp3;  arg4 = (ZenProperty_t)jarg4; 
  result = (ZenError)ZenSensorComponentExecuteProperty(arg1,arg2,arg3,arg4); jresult = (int)result;  return jresult; }
SWIGEXPORT int SWIGSTDCALL CSharp_ZenSensorComponentGetArrayProperty(void * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5, void * jarg6, void * jarg7) {
  int jresult ; ZenClientHandle_t arg1 ; ZenSensorHandle_t arg2 ; ZenComponentHandle_t arg3 ; ZenProperty_t arg4 ;
  ZenPropertyType arg5 ; void *arg6 = (void *) (void *)0 ; size_t *arg7 = (size_t *) 0 ; ZenClientHandle_t *argp1 ;
  ZenSensorHandle_t *argp2 ; ZenComponentHandle_t *argp3 ; ZenError result; argp1 = (ZenClientHandle_t *)jarg1;  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenClientHandle_t", 0);
    return 0; }  arg1 = *argp1;  argp2 = (ZenSensorHandle_t *)jarg2;  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenSensorHandle_t", 0);
    return 0; }  arg2 = *argp2;  argp3 = (ZenComponentHandle_t *)jarg3;  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenComponentHandle_t", 0);
    return 0; }  arg3 = *argp3;  arg4 = (ZenProperty_t)jarg4;  arg5 = (ZenPropertyType)jarg5;  arg6 = (void *)jarg6; 
  arg7 = (size_t *)jarg7;  result = (ZenError)ZenSensorComponentGetArrayProperty(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (int)result;  return jresult; }
SWIGEXPORT int SWIGSTDCALL CSharp_ZenSensorComponentGetBoolProperty(void * jarg1, void * jarg2, void * jarg3, int jarg4, void * jarg5) {
  int jresult ; ZenClientHandle_t arg1 ; ZenSensorHandle_t arg2 ; ZenComponentHandle_t arg3 ; ZenProperty_t arg4 ;
  bool *arg5 = (bool *) (bool *)0 ; ZenClientHandle_t *argp1 ; ZenSensorHandle_t *argp2 ; ZenComponentHandle_t *argp3 ;
  ZenError result; argp1 = (ZenClientHandle_t *)jarg1;  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenClientHandle_t", 0);
    return 0; }  arg1 = *argp1;  argp2 = (ZenSensorHandle_t *)jarg2;  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenSensorHandle_t", 0);
    return 0; }  arg2 = *argp2;  argp3 = (ZenComponentHandle_t *)jarg3;  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenComponentHandle_t", 0);
    return 0; }  arg3 = *argp3;  arg4 = (ZenProperty_t)jarg4;  arg5 = (bool *)jarg5; 
  result = (ZenError)ZenSensorComponentGetBoolProperty(arg1,arg2,arg3,arg4,arg5); jresult = (int)result;  return jresult; }
SWIGEXPORT int SWIGSTDCALL CSharp_ZenSensorComponentGetFloatProperty(void * jarg1, void * jarg2, void * jarg3, int jarg4, void * jarg5) {
  int jresult ; ZenClientHandle_t arg1 ; ZenSensorHandle_t arg2 ; ZenComponentHandle_t arg3 ; ZenProperty_t arg4 ;
  float *arg5 = (float *) (float *)0 ; ZenClientHandle_t *argp1 ; ZenSensorHandle_t *argp2 ; ZenComponentHandle_t *argp3 ;
  ZenError result; argp1 = (ZenClientHandle_t *)jarg1;  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenClientHandle_t", 0);
    return 0; }  arg1 = *argp1;  argp2 = (ZenSensorHandle_t *)jarg2;  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenSensorHandle_t", 0);
    return 0; }  arg2 = *argp2;  argp3 = (ZenComponentHandle_t *)jarg3;  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenComponentHandle_t", 0);
    return 0; }  arg3 = *argp3;  arg4 = (ZenProperty_t)jarg4;  arg5 = (float *)jarg5; 
  result = (ZenError)ZenSensorComponentGetFloatProperty(arg1,arg2,arg3,arg4,arg5); jresult = (int)result;  return jresult; }
SWIGEXPORT int SWIGSTDCALL CSharp_ZenSensorComponentGetInt32Property(void * jarg1, void * jarg2, void * jarg3, int jarg4, void * jarg5) {
  int jresult ; ZenClientHandle_t arg1 ; ZenSensorHandle_t arg2 ; ZenComponentHandle_t arg3 ; ZenProperty_t arg4 ;
  int32_t *arg5 = (int32_t *) (int32_t *)0 ; ZenClientHandle_t *argp1 ; ZenSensorHandle_t *argp2 ; ZenComponentHandle_t *argp3 ;
  ZenError result; argp1 = (ZenClientHandle_t *)jarg1;  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenClientHandle_t", 0);
    return 0; }  arg1 = *argp1;  argp2 = (ZenSensorHandle_t *)jarg2;  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenSensorHandle_t", 0);
    return 0; }  arg2 = *argp2;  argp3 = (ZenComponentHandle_t *)jarg3;  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenComponentHandle_t", 0);
    return 0; }  arg3 = *argp3;  arg4 = (ZenProperty_t)jarg4;  arg5 = (int32_t *)jarg5; 
  result = (ZenError)ZenSensorComponentGetInt32Property(arg1,arg2,arg3,arg4,arg5); jresult = (int)result;  return jresult; }
SWIGEXPORT int SWIGSTDCALL CSharp_ZenSensorComponentGetUInt64Property(void * jarg1, void * jarg2, void * jarg3, int jarg4, void * jarg5) {
  int jresult ; ZenClientHandle_t arg1 ; ZenSensorHandle_t arg2 ; ZenComponentHandle_t arg3 ; ZenProperty_t arg4 ;
  uint64_t *arg5 = (uint64_t *) (uint64_t *)0 ; ZenClientHandle_t *argp1 ; ZenSensorHandle_t *argp2 ;
  ZenComponentHandle_t *argp3 ; ZenError result; argp1 = (ZenClientHandle_t *)jarg1;  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenClientHandle_t", 0);
    return 0; }  arg1 = *argp1;  argp2 = (ZenSensorHandle_t *)jarg2;  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenSensorHandle_t", 0);
    return 0; }  arg2 = *argp2;  argp3 = (ZenComponentHandle_t *)jarg3;  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenComponentHandle_t", 0);
    return 0; }  arg3 = *argp3;  arg4 = (ZenProperty_t)jarg4;  arg5 = (uint64_t *)jarg5; 
  result = (ZenError)ZenSensorComponentGetUInt64Property(arg1,arg2,arg3,arg4,arg5); jresult = (int)result;  return jresult; }
SWIGEXPORT int SWIGSTDCALL CSharp_ZenSensorComponentSetArrayProperty(void * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5, void * jarg6, unsigned long jarg7) {
  int jresult ; ZenClientHandle_t arg1 ; ZenSensorHandle_t arg2 ; ZenComponentHandle_t arg3 ; ZenProperty_t arg4 ;
  ZenPropertyType arg5 ; void *arg6 = (void *) 0 ; size_t arg7 ; ZenClientHandle_t *argp1 ; ZenSensorHandle_t *argp2 ;
  ZenComponentHandle_t *argp3 ; ZenError result; argp1 = (ZenClientHandle_t *)jarg1;  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenClientHandle_t", 0);
    return 0; }  arg1 = *argp1;  argp2 = (ZenSensorHandle_t *)jarg2;  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenSensorHandle_t", 0);
    return 0; }  arg2 = *argp2;  argp3 = (ZenComponentHandle_t *)jarg3;  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenComponentHandle_t", 0);
    return 0; }  arg3 = *argp3;  arg4 = (ZenProperty_t)jarg4;  arg5 = (ZenPropertyType)jarg5;  arg6 = (void *)jarg6; 
  arg7 = (size_t)jarg7; 
  result = (ZenError)ZenSensorComponentSetArrayProperty(arg1,arg2,arg3,arg4,arg5,(void const *)arg6,arg7);
  jresult = (int)result;  return jresult; }
SWIGEXPORT int SWIGSTDCALL CSharp_ZenSensorComponentSetBoolProperty(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  int jresult ; ZenClientHandle_t arg1 ; ZenSensorHandle_t arg2 ; ZenComponentHandle_t arg3 ; ZenProperty_t arg4 ; bool arg5 ;
  ZenClientHandle_t *argp1 ; ZenSensorHandle_t *argp2 ; ZenComponentHandle_t *argp3 ; ZenError result;
  argp1 = (ZenClientHandle_t *)jarg1;  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenClientHandle_t", 0);
    return 0; }  arg1 = *argp1;  argp2 = (ZenSensorHandle_t *)jarg2;  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenSensorHandle_t", 0);
    return 0; }  arg2 = *argp2;  argp3 = (ZenComponentHandle_t *)jarg3;  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenComponentHandle_t", 0);
    return 0; }  arg3 = *argp3;  arg4 = (ZenProperty_t)jarg4;  arg5 = jarg5 ? true : false; 
  result = (ZenError)ZenSensorComponentSetBoolProperty(arg1,arg2,arg3,arg4,arg5); jresult = (int)result;  return jresult; }
SWIGEXPORT int SWIGSTDCALL CSharp_ZenSensorComponentSetFloatProperty(void * jarg1, void * jarg2, void * jarg3, int jarg4, float jarg5) {
  int jresult ; ZenClientHandle_t arg1 ; ZenSensorHandle_t arg2 ; ZenComponentHandle_t arg3 ; ZenProperty_t arg4 ; float arg5 ;
  ZenClientHandle_t *argp1 ; ZenSensorHandle_t *argp2 ; ZenComponentHandle_t *argp3 ; ZenError result;
  argp1 = (ZenClientHandle_t *)jarg1;  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenClientHandle_t", 0);
    return 0; }  arg1 = *argp1;  argp2 = (ZenSensorHandle_t *)jarg2;  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenSensorHandle_t", 0);
    return 0; }  arg2 = *argp2;  argp3 = (ZenComponentHandle_t *)jarg3;  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenComponentHandle_t", 0);
    return 0; }  arg3 = *argp3;  arg4 = (ZenProperty_t)jarg4;  arg5 = (float)jarg5; 
  result = (ZenError)ZenSensorComponentSetFloatProperty(arg1,arg2,arg3,arg4,arg5); jresult = (int)result;  return jresult; }
SWIGEXPORT int SWIGSTDCALL CSharp_ZenSensorComponentSetInt32Property(void * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5) {
  int jresult ; ZenClientHandle_t arg1 ; ZenSensorHandle_t arg2 ; ZenComponentHandle_t arg3 ; ZenProperty_t arg4 ;
  int32_t arg5 ; ZenClientHandle_t *argp1 ; ZenSensorHandle_t *argp2 ; ZenComponentHandle_t *argp3 ; ZenError result;
  argp1 = (ZenClientHandle_t *)jarg1;  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenClientHandle_t", 0);
    return 0; }  arg1 = *argp1;  argp2 = (ZenSensorHandle_t *)jarg2;  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenSensorHandle_t", 0);
    return 0; }  arg2 = *argp2;  argp3 = (ZenComponentHandle_t *)jarg3;  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenComponentHandle_t", 0);
    return 0; }  arg3 = *argp3;  arg4 = (ZenProperty_t)jarg4;  arg5 = (int32_t)jarg5; 
  result = (ZenError)ZenSensorComponentSetInt32Property(arg1,arg2,arg3,arg4,arg5); jresult = (int)result;  return jresult; }
SWIGEXPORT int SWIGSTDCALL CSharp_ZenSensorComponentSetUInt64Property(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned long jarg5) {
  int jresult ; ZenClientHandle_t arg1 ; ZenSensorHandle_t arg2 ; ZenComponentHandle_t arg3 ; ZenProperty_t arg4 ;
  uint64_t arg5 ; ZenClientHandle_t *argp1 ; ZenSensorHandle_t *argp2 ; ZenComponentHandle_t *argp3 ; ZenError result;
  argp1 = (ZenClientHandle_t *)jarg1;  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenClientHandle_t", 0);
    return 0; }  arg1 = *argp1;  argp2 = (ZenSensorHandle_t *)jarg2;  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenSensorHandle_t", 0);
    return 0; }  arg2 = *argp2;  argp3 = (ZenComponentHandle_t *)jarg3;  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenComponentHandle_t", 0);
    return 0; }  arg3 = *argp3;  arg4 = (ZenProperty_t)jarg4;  arg5 = (uint64_t)jarg5; 
  result = (ZenError)ZenSensorComponentSetUInt64Property(arg1,arg2,arg3,arg4,arg5); jresult = (int)result;  return jresult; }
SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZenSensorComponentIsArrayProperty(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  unsigned int jresult ; ZenClientHandle_t arg1 ; ZenSensorHandle_t arg2 ; ZenComponentHandle_t arg3 ; ZenProperty_t arg4 ;
  ZenClientHandle_t *argp1 ; ZenSensorHandle_t *argp2 ; ZenComponentHandle_t *argp3 ; bool result;
  argp1 = (ZenClientHandle_t *)jarg1;  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenClientHandle_t", 0);
    return 0; }  arg1 = *argp1;  argp2 = (ZenSensorHandle_t *)jarg2;  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenSensorHandle_t", 0);
    return 0; }  arg2 = *argp2;  argp3 = (ZenComponentHandle_t *)jarg3;  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenComponentHandle_t", 0);
    return 0; }  arg3 = *argp3;  arg4 = (ZenProperty_t)jarg4; 
  result = (bool)ZenSensorComponentIsArrayProperty(arg1,arg2,arg3,arg4); jresult = result;  return jresult; }
SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZenSensorComponentIsConstantProperty(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  unsigned int jresult ; ZenClientHandle_t arg1 ; ZenSensorHandle_t arg2 ; ZenComponentHandle_t arg3 ; ZenProperty_t arg4 ;
  ZenClientHandle_t *argp1 ; ZenSensorHandle_t *argp2 ; ZenComponentHandle_t *argp3 ; bool result;
  argp1 = (ZenClientHandle_t *)jarg1;  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenClientHandle_t", 0);
    return 0; }  arg1 = *argp1;  argp2 = (ZenSensorHandle_t *)jarg2;  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenSensorHandle_t", 0);
    return 0; }  arg2 = *argp2;  argp3 = (ZenComponentHandle_t *)jarg3;  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenComponentHandle_t", 0);
    return 0; }  arg3 = *argp3;  arg4 = (ZenProperty_t)jarg4; 
  result = (bool)ZenSensorComponentIsConstantProperty(arg1,arg2,arg3,arg4); jresult = result;  return jresult; }
SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZenSensorComponentIsExecutableProperty(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  unsigned int jresult ; ZenClientHandle_t arg1 ; ZenSensorHandle_t arg2 ; ZenComponentHandle_t arg3 ; ZenProperty_t arg4 ;
  ZenClientHandle_t *argp1 ; ZenSensorHandle_t *argp2 ; ZenComponentHandle_t *argp3 ; bool result;
  argp1 = (ZenClientHandle_t *)jarg1;  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenClientHandle_t", 0);
    return 0; }  arg1 = *argp1;  argp2 = (ZenSensorHandle_t *)jarg2;  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenSensorHandle_t", 0);
    return 0; }  arg2 = *argp2;  argp3 = (ZenComponentHandle_t *)jarg3;  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenComponentHandle_t", 0);
    return 0; }  arg3 = *argp3;  arg4 = (ZenProperty_t)jarg4; 
  result = (bool)ZenSensorComponentIsExecutableProperty(arg1,arg2,arg3,arg4); jresult = result;  return jresult; }
SWIGEXPORT int SWIGSTDCALL CSharp_ZenSensorComponentPropertyType(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  int jresult ; ZenClientHandle_t arg1 ; ZenSensorHandle_t arg2 ; ZenComponentHandle_t arg3 ; ZenProperty_t arg4 ;
  ZenClientHandle_t *argp1 ; ZenSensorHandle_t *argp2 ; ZenComponentHandle_t *argp3 ; ZenPropertyType result;
  argp1 = (ZenClientHandle_t *)jarg1;  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenClientHandle_t", 0);
    return 0; }  arg1 = *argp1;  argp2 = (ZenSensorHandle_t *)jarg2;  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenSensorHandle_t", 0);
    return 0; }  arg2 = *argp2;  argp3 = (ZenComponentHandle_t *)jarg3;  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenComponentHandle_t", 0);
    return 0; }  arg3 = *argp3;  arg4 = (ZenProperty_t)jarg4; 
  result = (ZenPropertyType)ZenSensorComponentPropertyType(arg1,arg2,arg3,arg4); jresult = (int)result;  return jresult; }
SWIGEXPORT int SWIGSTDCALL CSharp_ZenSensorComponentGnnsForwardRtkCorrections(void * jarg1, void * jarg2, void * jarg3, char * jarg4, char * jarg5, unsigned int jarg6) {
  int jresult ; ZenClientHandle_t arg1 ; ZenSensorHandle_t arg2 ; ZenComponentHandle_t arg3 ; char *arg4 = (char *) (char *)0 ;
  char *arg5 = (char *) (char *)0 ; uint32_t arg6 ; ZenClientHandle_t *argp1 ; ZenSensorHandle_t *argp2 ;
  ZenComponentHandle_t *argp3 ; ZenError result; argp1 = (ZenClientHandle_t *)jarg1;  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenClientHandle_t", 0);
    return 0; }  arg1 = *argp1;  argp2 = (ZenSensorHandle_t *)jarg2;  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenSensorHandle_t", 0);
    return 0; }  arg2 = *argp2;  argp3 = (ZenComponentHandle_t *)jarg3;  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ZenComponentHandle_t", 0);
    return 0; }  arg3 = *argp3;  arg4 = (char *)jarg4;  arg5 = (char *)jarg5;  arg6 = (uint32_t)jarg6; 
  result = (ZenError)ZenSensorComponentGnnsForwardRtkCorrections(arg1,arg2,arg3,(char const *)arg4,(char const *)arg5,arg6);
  jresult = (int)result;  return jresult; }
#ifdef __cplusplus
}
#endif

